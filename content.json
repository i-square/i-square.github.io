[{"title":"增强VPS安全性的常用方法","date":"2017-03-06T01:24:30.000Z","path":"post/增强VPS安全性的常用方法/","text":"前言因为上一篇文章中提到的目的，我入手了DO的VPS，由于刚刚接触VPS，对于VPS的安全性并没有什么概念，所以我直接使用一个汉化版PuTTY客户端，以root账户在22端口登录的，刚开始登录几次都没出现什么状况，然而隔天登录的时候就出现了类似以下的提示，这才让我产生了要提高VPS安全性的想法。 Last failed login: Tue Feb 10 23:32:08 EST 2017 from static-15-64-34.rpnspl.com on ssh:nottyThere were 166 failed login attempts since the last successful login.Last login: Tue Feb 10 18:54:37 2017 from ip 这里的ip并不是我的IP地址，也就是说有人(或机器人)在恶意试探我的VPS密码。看到这提示，我马上上谷歌搜索，发现这个现象非常普遍，多数都是被机器人扫描然后试图暴力破解，如果不加以防范，代价会很大。 我在查问题的时候发现，PuTTY官方并没有提供中文版本，所以网上的汉化版有可能被植入后门，非常不安全，所以在此提醒，这一类涉及重要密码的软件绝对不要用民间汉化版！ 那么如何知道自己的VPS账号正在遭受扫描和暴力破解呢？简单的方法就是查看日志： 12345678910# 查看登录成功的用户信息last# 最新的登录记录在最前面，所以可以用以下命令来查看。last | less# 查看登录失败的用户信息lastb# 查看登录日志tail /var/log/secure 也可以执行以下命令，查询出来的结果中包含了ip地址=数量就是攻击者信息。 1cat /var/log/secure|awk '/Failed/&#123;print $(NF-3)&#125;'|sort|uniq -c|awk '&#123;print $2\"=\"$1;&#125;' 如何来增强VPS账号的安全性呢？除了养成使用正规软件的好习惯外，还要从VPS本身来加强VPS账号的安全性。 Linux有一个自动统计VPS登录错误的工具：Denyhosts，一旦登录VPS账号错误次数超过了Denyhosts的安全设置，Denyhosts就会将该IP记录下来，同时将其放入黑名单当中，禁止该IP在某一段时间内继续访问VPS，通过它可以实现自动封锁恶意IP 默认的SSH端口是22，通过修改自己的SSH端口先为扫描者增加一道端口门槛 VPS默认的账号是root，如果我们禁用了root，那么要攻破账号又得先暴力猜测VPS的账号，难度又增加几分 如果还不放心，我们可以直接禁用密码登录验证VPS的方式，改用密钥登录，这样安全系数是相当高了 注：本人主机为CentOS 7 x64系统，以下内容均基于此环境 Denyhosts攻击 Linux各平台现在基本上都可以直接安装Denyhosts了，直接运行命令安装 1yum install denyhosts 安装好了Denyhosts，默认的配置基本上就可以防御一定的暴力攻击了，/etc/hosts.deny文件里保存了被屏蔽的记录。 如果你要自定义Denyhosts的相关配置，执行：vi /etc/denyhosts.conf，相关参数的说明可以自行搜索，一般用户默认即可。 修改SSH端口输入命令 1vi /etc/ssh/sshd_config 编辑SSH服务的配置文件，找到#port 22，将前面的#去掉，然后将22修改为你自己设定的端口号，如12345，保存后重启SSH服务以使配置生效 1systemctl restart sshd.service 禁用Root账户禁用root账户之前，必须先新建一个新的账户。 12useradd user #添加用户名passwd user #为user用户设置密码 然后编辑配置文件 1vi /etc/ssh/sshd_config 找到里面的PermitRootLogin yes，将后面的yes改成no，如果没有这一行则直接加入即可。保存后重启SSH服务以使配置生效 1systemctl restart sshd.service 使用密钥登录生成密钥SSH登录方式有账号+密码和密钥认证两种形式，为了阻止暴力破解VPS的账号和密码，我们可以放弃密码验证的方式，改用密钥文件验证。 以普通用户(如user)执行以下命令，在VPS上生成密钥文件 1ssh-keygen -t rsa 生成密钥时会询问你密钥保存的位置，默认是/username/.ssh，保持默认即可，你还可以为你的密钥设置一个密码，默认为空。 密钥生成后，进入密钥存放的目录中，执行以下命令，将公钥生成一个新的文件。 1cat id_rsa.pub &gt;&gt; authorized_keys 将id-rsa这个私钥文件用winSCP下载到本地，打开PuTTYGen软件，执行Conversions-&gt;Import Key，导入这个私钥文件，然后选择Save private key，这时会在本地生成一个PPK文件，在PuTTY的Connection/SSH/Auth中选择刚刚保存的PPK文件，以后即可用密钥认证登录VPS了。 CentOS 7权限问题CentOS 7系统下，用户user的home目录：/home/user的权限变成了777，造成不能正常登陆SSH，报如下错误：Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password) SSH对公钥、私钥的权限和所有权的要求是非常严格的，总结如下：1、下面两个目录的所有权必须是user，所属组也应该是user，权限必须为700 /home/user/home/user/.ssh 2、下面公钥文件的所有权必须是user，所属组也应该是user，权限必须为644 /home/user/.ssh/authorized_keys 3、下面私钥文件的所有权必须是user，所属组也应该是user，权限必须是600 /home/user/.ssh/id_rsa 接着上面的操作，这次需要获取root权限，首先输入命令su再输入root密码获取root权限，然后依次执行以下命令 12345mkdir /etc/ssh/usercp /home/user/.ssh/authorized_keys /etc/ssh/user/chmod 755 /etc/ssh/userchmod 600 /etc/ssh/user/authorized_keyschown -R user:user /etc/ssh/user 编辑SSH配置文件1vi /etc/ssh/sshd_config 找到AuthorizedKeysFile这项(如果没有则添加)，修改为 1AuthorizedKeysFile /etc/ssh/%u/authorized_keys 保存后重启SSH服务以使配置生效 1systemctl restart sshd.service 禁止密码登录注意：请确认你已经可以通过密钥认证的方式登录VPS 有了密钥登录VPS，我们就可以禁止用密码登录这种验证方式了，还是编辑SSH配置文件 1vi /etc/ssh/sshd_config 找到PasswordAuthentication(没有则添加)并修改后面的yes为no，保存后重启SSH服务以使配置生效 1systemctl restart sshd.service 小结通过以上这些措施可以有效防范暴力破解VPS，平时使用官方软件也是提升安全性的一大举措，总而言之，没有绝对的安全，但是只要我们平时稍加留心就不会给破解者可乘之机。 参考链接：https://www.freehao123.com/vps-ssh/http://www.cnblogs.com/jxterminator/p/4105545.html","tags":[{"name":"VPS","slug":"VPS","permalink":"https://i-square.github.io/tags/VPS/"}]},{"title":"VPS搭建Shadowsocks服务和优化笔记","date":"2017-02-28T03:43:59.000Z","path":"post/VPS搭建Shadowsocks服务和优化笔记/","text":"前言由于最近开始上Github较多，无意中发现Github推出了一个学生开发者优惠大礼包，这对于囊中羞涩的学生来说真的是大大的福利，给Github一个大大的赞！ 这个优惠包里头包含很多开发者需要付费购买的服务或者工具的优惠券，其中有一个DigitalOcean的$50优惠券，对于一直想入一台VPS但又因为价格昂贵望而却步的我来说就是雪中送炭啊，于是我马上注册获取优惠券，随即开始折腾，这里把这两天折腾的过程记录一下。 前期准备 一台运行CentOS 7 x64系统的主机 PuTTY，Windows系统下登录远程主机的工具，一定要去官网下载，一些所谓的汉化版会夹带私货 winSCP，Windows系统下管理远程主机文件的工具，也去官网下载 说明：VPS是必不可少的，(附我的digitalocean推介码，注册即可获赠$10)，PuTTY用来在Windows系统下远程登录VPS，winSCP会用来下载密钥。 Shadowsocks配置首先使用PuTTY登录到你的VPS，方法就不赘述了，登录后切换到root账户。 安装shadowsocks服务一步一步执行以下命令，可以复制后在PuTTY中点击鼠标右键粘贴，回车执行，如询问(Y/N)，则输入Y回车。 12345yum install epel-releaseyum updateyum install python-setuptoolseasy_install pippip install shadowsocks 以上命令执行完之后，shadowsocks已安装到你的VPS中，但还没有运行。 配置shadowsocks服务运行shadowsocks需要一个配置文件，我们在/etc目录下新建一个配置文件。 1vi /etc/shadowsocks.json 按键盘i建进入编辑模式，复制以下内容，然后直接右键粘贴。请改“端口号”为你需要的端口号，范围1 ~ 65535，改“你的密码”为你自己的密码。 12345678910&#123; \"server\":\"0.0.0.0\", \"server_port\":端口号, \"local_address\": \"127.0.0.1\", \"local_port\":1080, \"password\":\"你的密码\", \"timeout\":500, \"method\":\"aes-256-cfb\", \"fast_open\": true&#125; 粘贴后，按键盘Esc键退出编辑模式，输入:wq回车，保存并退出。上面这些参数应该不用多说了，用shadowsocks的都懂的。最后一项fast_open表示是否使用TCP_FASTOPEN（后面优化部分会打开系统的TCP_FASTOPEN，所以这里填true,否则填false) Supervisor监控进程配置好shadowsocks之后我们需要后台自启动服务，虽然目前shadowsocks自己也可以后台运行，但是如果有一个监控进程能在shadowsocks进程挂了之后重新启动它就更好了，supervisor就是用来监控进程的工具。 安装supervisor运行以下命令 12yum install python-setuptools supervisoreasy_install supervisor 配置supervisor以上命令执行完之后，supervisor已经安装，然后我们编辑/etc/supervisord.conf文件 1vi /etc/supervisord.conf 按键盘i建进入编辑模式，光标移到底部空行处，如没空行就在末尾回车加入空行，复制以下内容： 123456[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautostart=trueautorestart=truerestartretries=10user=nobody 复制完成后，回个车，为底部再留下空行，按键盘Esc键退出编辑模式，输入:wq回车，保存并退出。这样就完成了supervisor监控shadowsocks进程的配置，接下来需要让supervisor开机启动，这样才能达到我们的目的。 supervisor开机自启所幸，CentOS 7下supervisor开机启动非常的容易，User-contributed OS init scripts for Supervisor，这个Github项目提供各个系统下的supervisor服务开机启动脚本，其中centos-systemd-etcs就是我们需要的CentOS 7下面的脚本。 建议直接复制脚本内容，然后添加到目录/etc/systemd/system下。 1vi /etc/systemd/system/supervisord.service 按键盘i建进入编辑模式，粘贴脚本内容后按键盘Esc键退出编辑模式，输入:wq回车，保存并退出。然后运行 1systemctl enable supervisord.service 就完成了supervisor的开机启动，到此Shadowsocks已经在CentOS 7 x64下安装配置成功，运行命令 1reboot 重启服务器使服务生效，此时已经可以正常使用Shadowsocks服务。 Shadowsocks服务优化系统层面基于kvm架构vps的优化(DO的主机正好可以用) 优化内核参数vi /etc/sysctl.conf直接把以下内容复制粘贴进去 12345678910111213141516171819202122232425262728293031323334353637# max open filesfs.file-max = 1024000# max read buffernet.core.rmem_max = 67108864# max write buffernet.core.wmem_max = 67108864# default read buffernet.core.rmem_default = 65536# default write buffernet.core.wmem_default = 65536# max processor input queuenet.core.netdev_max_backlog = 4096# max backlognet.core.somaxconn = 4096# resist SYN flood attacksnet.ipv4.tcp_syncookies = 1# reuse timewait sockets when safenet.ipv4.tcp_tw_reuse = 1# turn off fast timewait sockets recyclingnet.ipv4.tcp_tw_recycle = 0# short FIN timeoutnet.ipv4.tcp_fin_timeout = 30# short keepalive timenet.ipv4.tcp_keepalive_time = 1200# outbound port rangenet.ipv4.ip_local_port_range = 10000 65000# max SYN backlognet.ipv4.tcp_max_syn_backlog = 4096# max timewait sockets held by system simultaneouslynet.ipv4.tcp_max_tw_buckets = 5000# TCP receive buffernet.ipv4.tcp_rmem = 4096 87380 67108864# TCP write buffernet.ipv4.tcp_wmem = 4096 65536 67108864# turn on path MTU discoverynet.ipv4.tcp_mtu_probing = 1 保存生效sysctl -p TCP优化1.修改文件句柄数限制ubuntu/centos均可修改/etc/sysctl.conf找到fs.file-max这一行，修改其值为1024000，并保存退出。然后执行sysctl -p使其生效修改vi /etc/security/limits.conf文件，加入 12* soft nofile 512000* hard nofile 1024000 针对centos,还需要修改vi /etc/pam.d/common-session文件，加入session required pam_limits.so 2.修改vi /etc/profile文件，加入ulimit -SHn 1024000然后重启服务器执行ulimit -n，查询返回1024000即可。 1234567sysctl.conf报错解决方法修复modprobe的：rm -f /sbin/modprobe ln -s /bin/true /sbin/modprobe修复sysctl的：rm -f /sbin/sysctl ln -s /bin/true /sbin/sysctl #### 锐速锐速官方已不再维护免费版本，目前破解版支持的内核太旧，放弃。 开启TCP Fast Open这个前提条件是需要服务器是Linux 3.7+的内核，如果满足条件，那就在服务端的vi /etc/sysctl.conf文件中再加上一行。 12# turn on TCP Fast Open on both client and server sidenet.ipv4.tcp_fastopen = 3 然后记得把vi /etc/shadowsocks.json配置文件中”fast_open”:配置为true。这样速度也将会有非常显著的提升。 开启TCP BBR拥塞控制算法BBR 目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 效果并不比速锐差Linux kernel 4.9 已支持 tcp_bbr 下面简单讲述如何开启 下载更换内核最新内核查看这里 123rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgrpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmyum --enablerepo=elrepo-kernel install kernel-ml -y 查看内核是否安装成功 1rpm -qa | grep kernel 更新 grub 系统引导文件 1vi /etc/default/grub 修改对应的字段为 GRUB_DEFAULT=0，然后重新编译启动项 1grub2-mkconfig -o /boot/grub2/grub.cfg 删除旧内核(可选) 1yum remove kernel 最后重启reboot生效。 注意，某些服务商可能需要首先将VPS配置为可自定义内核，然后grub2的配置才会生效。 开启bbr 开机后 uname -r 看看内核是不是最新的，至少要大于4.9 执行 12echo \"net.core.default_qdisc=fq\" &gt;&gt; /etc/sysctl.confecho \"net.ipv4.tcp_congestion_control=bbr\" &gt;&gt; /etc/sysctl.conf 保存生效sysctl -p 执行 12sysctl net.ipv4.tcp_available_congestion_controlsysctl net.ipv4.tcp_congestion_control 如果结果都有bbr, 则证明你的内核已开启bbr 执行lsmod | grep bbr看到有 tcp_bbr 模块即说明bbr已启动 加密层面安装M2Crypto这个可以提高SS的加密速度，安装办法:先安装依赖包：yum install -y openssl-devel gcc swig python-devel autoconf libtool安装setuptools: 12wget --no-check-certificate https://raw.githubusercontent.com/iMeiji/shadowsocks_install/master/ez_setup.pypython ez_setup.py install 再通过pip安装M2Crypto:pip install M2Crypto或者pip install M2Crypto --upgrade 2.2 安装 gevent安装 gevent可以提高 Shadowsocks 的性能。 CentOS 123yum install -y libeventpip install greenletpip install gevent 使用CHACHA20加密算法首先，安装libsodium，让系统支持chacha20算法。 CentOS 123456789101112yum groupinstall &quot;Development Tools&quot;wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gztar zxf LATEST.tar.gzcd libsodium* ./configuremakemake installvi /etc/ld.so.conf添加一行：/usr/local/lib保存退出后，运行命令：ldconfig 然后修改ss加密方式:vi /etc/shadowsocks.json“method”:”aes-256-cfb”改成”method”:”chacha20”. 网络层面此外，选择合适的端口也能优化梯子的速度，广大SS用户的实践经验表明，检查站（GFW）存在一种机制来降低自身的运算压力，即常用的协议端口（如http，smtp，ssh，https，ftp等）的检查较少，所以建议SS绑定这些常用的端口（如：21，22，25，80，443），速度也会有显著提升。如果你还要给小伙伴爬，那我建议开启多个端口而不是共用，这样网络会更加顺畅。 防火墙设置（如有）自动调整MTUiptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu 开启 NAT （记得把 eth0 改成自己的网卡名）iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 开启 IPv4 的转发sysctl -w net.ipv4.ip_forward=1 打开 443 端口12iptables -I INPUT -p tcp --dport 443 -j ACCEPTiptables -I INPUT -p udp --dport 443 -j ACCEPT 重启防火墙iptables：service iptables restart 结语至此，这几天配置shadowsocks的过程便结束了，这里只是将我遇到的情况加以记录，并不能涵盖所有情况，如果碰到其他状况，那么google就好了。 :P","tags":[{"name":"VPS","slug":"VPS","permalink":"https://i-square.github.io/tags/VPS/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://i-square.github.io/tags/Shadowsocks/"}]},{"title":"新的起点","date":"2017-02-25T09:27:39.000Z","path":"post/新的起点/","text":"前言从2013年我搭建的第一个Wordpress博客开始，我陆陆续续尝试过各种博客类网站，有自己搭建的Wordpress博客，也有诸如点点网和lofter这样的轻博客社区，但最终都是留下一篇hello world走人。 缘起近两年随着github的火热，搭建在github pages上的博客也如雨后春笋一般噌噌地冒出来，我也想尝尝鲜，于是在大谷歌搜索到一篇文章：使用GitHub和Hexo搭建免费静态Blog，作者：wsgzao，然后照猫画虎搭建了自己的博客，非常感谢原文博主分享自己的经验，让我这个门外汉也能轻松上手。 展望这次使用Hexo + github的博客我希望能够长时间更新下去，博客定位大方向是我自己的学习笔记、思考感悟，也会写一些生活随笔，说不定也会分享一些图片、音乐、视频等等，:) 多说点儿刚开始学习用Markdown写文章，还不是太习惯，用到的语法也只有一两种，慢慢完善吧，:P","tags":[{"name":"博客","slug":"博客","permalink":"https://i-square.github.io/tags/博客/"},{"name":"hexo","slug":"hexo","permalink":"https://i-square.github.io/tags/hexo/"},{"name":"Github","slug":"Github","permalink":"https://i-square.github.io/tags/Github/"}]},{"title":"Post Test 发布测试","date":"2017-02-24T06:33:36.000Z","path":"post/Post-Test-发布测试/","text":"测试首先发布一篇测试文章，以后慢慢扩充。 龟速学习Markdown语法ing。","tags":[{"name":"test","slug":"test","permalink":"https://i-square.github.io/tags/test/"}]},{"title":"Hello World","date":"2017-02-23T07:15:45.000Z","path":"post/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"test","slug":"test","permalink":"https://i-square.github.io/tags/test/"}]}]