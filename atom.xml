<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平方君的后花园</title>
  <subtitle>Keep It Simple, Stupid.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://i-square.github.io/"/>
  <updated>2017-03-29T10:55:39.550Z</updated>
  <id>https://i-square.github.io/</id>
  
  <author>
    <name>平方君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MathType6.9b不兼容Office2016的解决办法</title>
    <link href="https://i-square.github.io/post/MathType6-9b%E4%B8%8D%E5%85%BC%E5%AE%B9Office2016%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://i-square.github.io/post/MathType6-9b不兼容Office2016的解决办法/</id>
    <published>2017-03-29T10:37:43.000Z</published>
    <updated>2017-03-29T10:55:39.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>安装MathType6.9b后打开Word2016，发现菜单栏里并没有集成MathType，想办法解决以后，菜单栏上已经集成了MathType，但是仍然不能用，每次打开Word都会弹框提示Mathpage.wll未找到，无奈又去网上找寻了解决办法，在这里记录一下，就当云笔记了。</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="Office2016支持"><a href="#Office2016支持" class="headerlink" title="Office2016支持"></a>Office2016支持</h3><p>Office2016需要在MathType根目录下添加文件MPlugin.dll，一般在安装文件夹里</p>
<h3 id="Mathpage-wll未找到问题"><a href="#Mathpage-wll未找到问题" class="headerlink" title="Mathpage.wll未找到问题"></a>Mathpage.wll未找到问题</h3><p>通过以下方法解决(以Office2016为例)：</p>
<ol>
<li>依次打开<code>Word→文件→选项→信任中心→信任中心设置→受信任位置→添加新位置</code><br>添加 <code>C:\Program Files\Microsoft Office\Office16\STARTUP</code>，然后关闭Word</li>
<li>在mathtype安装目录下找到以下2个文件(以64位系统为例):  <ul>
<li><code>C:\Program Files (x86)\MathType\MathPage\64\MathPage.wll</code></li>
<li><code>C:\Program Files (x86)\MathType\Office Support\64\MathType Commands 6 For Word 2016.dotm</code></li>
</ul>
</li>
<li>将两个文件分别拷贝到对应的文件夹中:  <ul>
<li>将<code>MathType Commands 6 For Word 2016.dotm</code> 拷贝到 <code>C:\Program Files\Microsoft Office\Office16\STARTUP</code></li>
<li>将 <code>MathPage.wll</code> 拷贝到 <code>C:\Program Files\Microsoft Office\Office16</code></li>
</ul>
</li>
<li>重新打开Word你会发现一切都OK了!</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;安装MathType6.9b后打开Word2016，发现菜单栏里并没有集成MathType，想办法解决以后，菜单栏上已经集成了MathType，但是仍然不能用，每次打开Word都会弹框提示Mathpage.wll未找到，无奈又去网上找寻了解决办法，在这里记录一下，就当云笔记了。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://i-square.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Office" scheme="https://i-square.github.io/tags/Office/"/>
    
      <category term="MathType" scheme="https://i-square.github.io/tags/MathType/"/>
    
  </entry>
  
  <entry>
    <title>Office2016中右键无法打开Visio图像的解决办法</title>
    <link href="https://i-square.github.io/post/Office2016%E4%B8%AD%E5%8F%B3%E9%94%AE%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80Visio%E5%9B%BE%E5%83%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://i-square.github.io/post/Office2016中右键无法打开Visio图像的解决办法/</id>
    <published>2017-03-26T07:21:56.000Z</published>
    <updated>2017-03-29T10:40:20.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在Office2016中，右键Visio图像，只有“转换”功能，而不再提供之前早期Office中提供的“打开”和“编辑”功能，那么，如何能够在Office2016中打开visio图像呢？</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在Visio图上使用 <code>ALT + 双击鼠标左键</code> 即可在Visio中打开<br>直接双击Visio图像则是和之前版本一样，在当前Office窗口中打开Visio图。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在Office2016中，右键Visio图像，只有“转换”功能，而不再提供之前早期Office中提供的“打开”和“编辑”功能，那么，如何能够在Office2016中打开visio图像呢？&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://i-square.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Office" scheme="https://i-square.github.io/tags/Office/"/>
    
      <category term="Visio" scheme="https://i-square.github.io/tags/Visio/"/>
    
  </entry>
  
  <entry>
    <title>增强VPS安全性的常用方法</title>
    <link href="https://i-square.github.io/post/%E5%A2%9E%E5%BC%BAVPS%E5%AE%89%E5%85%A8%E6%80%A7%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://i-square.github.io/post/增强VPS安全性的常用方法/</id>
    <published>2017-03-06T01:24:30.000Z</published>
    <updated>2017-03-08T10:47:07.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为<a href="https://i-square.github.io/post/VPS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%92%8C%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/">上一篇文章</a>中提到的目的，我入手了DO的VPS，由于刚刚接触VPS，对于VPS的安全性并没有什么概念，所以我直接使用一个汉化版PuTTY客户端，以root账户在22端口登录的，刚开始登录几次都没出现什么状况，然而隔天登录的时候就出现了类似以下的提示，这才让我产生了要提高VPS安全性的想法。</p>
<a id="more"></a>
<blockquote>
<p>Last failed login: Tue Feb 10 23:32:08 EST 2017 from static-15-64-34.rpnspl.com on ssh:notty<br>There were 166 failed login attempts since the last successful login.<br>Last login: Tue Feb 10 18:54:37 2017 from <code>ip</code></p>
</blockquote>
<p>这里的<code>ip</code>并不是我的IP地址，也就是说有人(或机器人)在恶意试探我的VPS密码。看到这提示，我马上上谷歌搜索，发现这个现象非常普遍，多数都是被机器人扫描然后试图暴力破解，如果不加以防范，代价会很大。</p>
<p>我在查问题的时候发现，PuTTY官方并没有提供中文版本，所以网上的汉化版有可能被植入后门，非常不安全，所以在此提醒，这一类涉及重要密码的软件<strong>绝对不要</strong>用民间汉化版！</p>
<p>那么如何知道自己的VPS账号正在遭受扫描和暴力破解呢？简单的方法就是查看日志：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看登录成功的用户信息</span></div><div class="line">last</div><div class="line"><span class="comment"># 最新的登录记录在最前面，所以可以用以下命令来查看。</span></div><div class="line">last | less</div><div class="line"></div><div class="line"><span class="comment"># 查看登录失败的用户信息</span></div><div class="line">lastb</div><div class="line"></div><div class="line"><span class="comment"># 查看登录日志</span></div><div class="line">tail /var/<span class="built_in">log</span>/secure</div></pre></td></tr></table></figure>
<p>也可以执行以下命令，查询出来的结果中包含了<code>ip地址=数量</code>就是攻击者信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /var/<span class="built_in">log</span>/secure|awk <span class="string">'/Failed/&#123;print $(NF-3)&#125;'</span>|sort|uniq -c|awk <span class="string">'&#123;print $2"="$1;&#125;'</span></div></pre></td></tr></table></figure>
<p>如何来增强VPS账号的安全性呢？除了养成使用正规软件的好习惯外，还要从VPS本身来加强VPS账号的安全性。</p>
<ul>
<li>Linux有一个自动统计VPS登录错误的工具：<code>Denyhosts</code>，一旦登录VPS账号错误次数超过了Denyhosts的安全设置，Denyhosts就会将该IP记录下来，同时将其放入黑名单当中，禁止该IP在某一段时间内继续访问VPS，通过它可以实现自动封锁恶意IP</li>
<li>默认的SSH端口是22，通过修改自己的SSH端口先为扫描者增加一道端口门槛</li>
<li>VPS默认的账号是root，如果我们禁用了root，那么要攻破账号又得先暴力猜测VPS的账号，难度又增加几分</li>
<li>如果还不放心，我们可以直接禁用密码登录验证VPS的方式，改用密钥登录，这样安全系数是相当高了</li>
</ul>
<p><em>注：本人主机为CentOS 7 x64系统，以下内容均基于此环境</em></p>
<h2 id="Denyhosts攻击"><a href="#Denyhosts攻击" class="headerlink" title="Denyhosts攻击"></a>Denyhosts攻击</h2><ol>
<li>Linux各平台现在基本上都可以直接安装Denyhosts了，直接运行命令安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install denyhosts</div></pre></td></tr></table></figure>
<ol>
<li><p>安装好了Denyhosts，默认的配置基本上就可以防御一定的暴力攻击了，<code>/etc/hosts.deny</code>文件里保存了被屏蔽的记录。</p>
</li>
<li><p>如果你要自定义Denyhosts的相关配置，执行：<code>vi /etc/denyhosts.conf</code>，相关参数的说明可以自行搜索，一般用户默认即可。</p>
</li>
</ol>
<h2 id="修改SSH端口"><a href="#修改SSH端口" class="headerlink" title="修改SSH端口"></a>修改SSH端口</h2><p>输入命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>编辑SSH服务的配置文件，找到<code>#port 22</code>，将前面的<code>#</code>去掉，然后将<code>22</code>修改为你自己设定的端口号，如<code>12345</code>，保存后重启SSH服务以使配置生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure>
<h2 id="禁用Root账户"><a href="#禁用Root账户" class="headerlink" title="禁用Root账户"></a>禁用Root账户</h2><p>禁用root账户之前，必须先新建一个新的账户。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">useradd user <span class="comment">#添加用户名</span></div><div class="line">passwd user <span class="comment">#为user用户设置密码</span></div></pre></td></tr></table></figure>
<p>然后编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>找到里面的<code>PermitRootLogin yes</code>，将后面的<code>yes</code>改成<code>no</code>，如果没有这一行则直接加入即可。保存后重启SSH服务以使配置生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure>
<h2 id="使用密钥登录"><a href="#使用密钥登录" class="headerlink" title="使用密钥登录"></a>使用密钥登录</h2><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>SSH登录方式有账号+密码和密钥认证两种形式，为了阻止暴力破解VPS的账号和密码，我们可以放弃密码验证的方式，改用密钥文件验证。</p>
<p>以<strong>普通用户</strong>(如user)执行以下命令，在VPS上生成密钥文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p>生成密钥时会询问你密钥保存的位置，默认是<code>/username/.ssh</code>，保持默认即可，你还可以为你的密钥设置一个密码，默认为空。</p>
<p>密钥生成后，进入密钥存放的目录中，执行以下命令，将公钥生成一个新的文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat id_rsa.pub &gt;&gt; authorized_keys</div></pre></td></tr></table></figure>
<p>将id-rsa这个私钥文件用winSCP下载到本地，打开PuTTYGen软件，执行Conversions-&gt;Import Key，导入这个私钥文件，然后选择Save private key，这时会在本地生成一个PPK文件，在PuTTY的<code>Connection/SSH/Auth</code>中选择刚刚保存的PPK文件，以后即可用密钥认证登录VPS了。</p>
<h3 id="CentOS-7权限问题"><a href="#CentOS-7权限问题" class="headerlink" title="CentOS 7权限问题"></a>CentOS 7权限问题</h3><p>CentOS 7系统下，用户user的home目录：<code>/home/user</code>的权限变成了<code>777</code>，造成不能正常登陆SSH，报如下错误：<code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)</code></p>
<p>SSH对公钥、私钥的权限和所有权的要求是非常严格的，总结如下：<br>1、下面两个目录的所有权必须是<code>user</code>，所属组也应该是<code>user</code>，权限必须为<code>700</code>  </p>
<blockquote>
<p>/home/user<br>/home/user/.ssh</p>
</blockquote>
<p>2、下面公钥文件的所有权必须是<code>user</code>，所属组也应该是<code>user</code>，权限必须为<code>644</code>  </p>
<blockquote>
<p>/home/user/.ssh/authorized_keys</p>
</blockquote>
<p>3、下面私钥文件的所有权必须是<code>user</code>，所属组也应该是<code>user</code>，权限必须是<code>600</code>  </p>
<blockquote>
<p>/home/user/.ssh/id_rsa</p>
</blockquote>
<p>接着上面的操作，这次需要获取root权限，首先输入命令<code>su</code>再输入root密码获取root权限，然后依次执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/ssh/user</div><div class="line">cp /home/user/.ssh/authorized_keys /etc/ssh/user/</div><div class="line">chmod 755 /etc/ssh/user</div><div class="line">chmod 600 /etc/ssh/user/authorized_keys</div><div class="line">chown -R user:user /etc/ssh/user</div></pre></td></tr></table></figure>
<p>编辑SSH配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure></p>
<p>找到<code>AuthorizedKeysFile</code>这项(如果没有则添加)，修改为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AuthorizedKeysFile /etc/ssh/%u/authorized_keys</div></pre></td></tr></table></figure>
<p>保存后重启SSH服务以使配置生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure>
<h3 id="禁止密码登录"><a href="#禁止密码登录" class="headerlink" title="禁止密码登录"></a>禁止密码登录</h3><p><strong>注意：请确认你已经可以通过密钥认证的方式登录VPS</strong></p>
<p>有了密钥登录VPS，我们就可以禁止用密码登录这种验证方式了，还是<br>编辑SSH配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>找到<code>PasswordAuthentication</code>(没有则添加)并修改后面的<code>yes</code>为<code>no</code>，保存后重启SSH服务以使配置生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过以上这些措施可以有效防范暴力破解VPS，平时使用官方软件也是提升安全性的一大举措，总而言之，没有绝对的安全，但是只要我们平时稍加留心就不会给破解者可乘之机。</p>
<blockquote>
<p>参考链接：<br><a href="https://www.freehao123.com/vps-ssh/" target="_blank" rel="external">https://www.freehao123.com/vps-ssh/</a><br><a href="http://www.cnblogs.com/jxterminator/p/4105545.html" target="_blank" rel="external">http://www.cnblogs.com/jxterminator/p/4105545.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因为&lt;a href=&quot;https://i-square.github.io/post/VPS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%92%8C%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/&quot;&gt;上一篇文章&lt;/a&gt;中提到的目的，我入手了DO的VPS，由于刚刚接触VPS，对于VPS的安全性并没有什么概念，所以我直接使用一个汉化版PuTTY客户端，以root账户在22端口登录的，刚开始登录几次都没出现什么状况，然而隔天登录的时候就出现了类似以下的提示，这才让我产生了要提高VPS安全性的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://i-square.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="VPS" scheme="https://i-square.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>VPS搭建Shadowsocks服务和优化笔记</title>
    <link href="https://i-square.github.io/post/VPS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%92%8C%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>https://i-square.github.io/post/VPS搭建Shadowsocks服务和优化笔记/</id>
    <published>2017-02-28T03:43:59.000Z</published>
    <updated>2017-03-03T03:11:48.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于最近开始上Github较多，无意中发现Github推出了一个<a href="https://education.github.com/pack" target="_blank" rel="external">学生开发者优惠大礼包</a>，这对于囊中羞涩的学生来说真的是大大的福利，给Github一个大大的赞！</p>
<p>这个优惠包里头包含很多开发者需要付费购买的服务或者工具的优惠券，其中有一个<a href="https://www.digitalocean.com/" target="_blank" rel="external">DigitalOcean</a>的$50优惠券，对于一直想入一台VPS但又因为价格昂贵望而却步的我来说就是雪中送炭啊，于是我马上注册获取优惠券，随即开始折腾，这里把这两天折腾的过程记录一下。</p>
<a id="more"></a>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>一台运行CentOS 7 x64系统的主机</li>
<li><a href="http://www.putty.org/" target="_blank" rel="external">PuTTY</a>，Windows系统下登录远程主机的工具，一定要去官网下载，一些所谓的汉化版会夹带私货</li>
<li><a href="https://winscp.net/eng/download.php" target="_blank" rel="external">winSCP</a>，Windows系统下管理远程主机文件的工具，也去官网下载</li>
</ul>
<p>说明：VPS是必不可少的，(附<a href="https://www.digitalocean.com/?refcode=ef0a405dfe82" target="_blank" rel="external">我的digitalocean推介码</a>，注册即可获赠$10)，PuTTY用来在Windows系统下远程登录VPS，winSCP会用来下载密钥。</p>
<h2 id="Shadowsocks配置"><a href="#Shadowsocks配置" class="headerlink" title="Shadowsocks配置"></a>Shadowsocks配置</h2><p>首先使用PuTTY登录到你的VPS，方法就不赘述了，登录后切换到root账户。</p>
<h3 id="安装shadowsocks服务"><a href="#安装shadowsocks服务" class="headerlink" title="安装shadowsocks服务"></a>安装shadowsocks服务</h3><p>一步一步执行以下命令，可以复制后在PuTTY中点击鼠标右键粘贴，回车执行，如询问(Y/N)，则输入Y回车。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">yum update</div><div class="line">yum install python-setuptools</div><div class="line">easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<p>以上命令执行完之后，shadowsocks已安装到你的VPS中，但还没有运行。</p>
<h3 id="配置shadowsocks服务"><a href="#配置shadowsocks服务" class="headerlink" title="配置shadowsocks服务"></a>配置shadowsocks服务</h3><p>运行shadowsocks需要一个配置文件，我们在/etc目录下新建一个配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>按键盘i建进入编辑模式，复制以下内容，然后直接右键粘贴。请改“端口号”为你需要的端口号，范围1 ~ 65535，改“你的密码”为你自己的密码。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">    <span class="attr">"server_port"</span>:端口号,</div><div class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">    <span class="attr">"password"</span>:<span class="string">"你的密码"</span>,</div><div class="line">    <span class="attr">"timeout"</span>:<span class="number">500</span>,</div><div class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="attr">"fast_open"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>粘贴后，按键盘Esc键退出编辑模式，输入:wq回车，保存并退出。<br>上面这些参数应该不用多说了，用shadowsocks的都懂的。<br>最后一项<code>fast_open</code>表示是否使用<code>TCP_FASTOPEN</code>（后面优化部分会打开系统的TCP_FASTOPEN，所以这里填true,否则填false)</p>
<h2 id="Supervisor监控进程"><a href="#Supervisor监控进程" class="headerlink" title="Supervisor监控进程"></a>Supervisor监控进程</h2><p>配置好shadowsocks之后我们需要后台自启动服务，虽然目前shadowsocks自己也可以后台运行，但是如果有一个监控进程能在shadowsocks进程挂了之后重新启动它就更好了，supervisor就是用来监控进程的工具。</p>
<h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><p>运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools supervisor</div><div class="line">easy_install supervisor</div></pre></td></tr></table></figure>
<h3 id="配置supervisor"><a href="#配置supervisor" class="headerlink" title="配置supervisor"></a>配置supervisor</h3><p>以上命令执行完之后，supervisor已经安装，然后我们编辑/etc/supervisord.conf文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/supervisord.conf</div></pre></td></tr></table></figure>
<p>按键盘i建进入编辑模式，光标移到底部空行处，如没空行就在末尾回车加入空行，复制以下内容：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">[program:shadowsocks]</span></div><div class="line"><span class="attr">command</span>=ssserver -c /etc/shadowsocks.json</div><div class="line"><span class="attr">autostart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">restartretries</span>=<span class="number">10</span></div><div class="line"><span class="attr">user</span>=nobody</div></pre></td></tr></table></figure>
<p>复制完成后，回个车，为底部再留下空行，按键盘Esc键退出编辑模式，输入:wq回车，保存并退出。这样就完成了supervisor监控shadowsocks进程的配置，接下来需要让supervisor开机启动，这样才能达到我们的目的。</p>
<h3 id="supervisor开机自启"><a href="#supervisor开机自启" class="headerlink" title="supervisor开机自启"></a>supervisor开机自启</h3><p>所幸，CentOS 7下supervisor开机启动非常的容易，<a href="https://github.com/Supervisor/initscripts" target="_blank" rel="external">User-contributed OS init scripts for Supervisor</a>，这个Github项目提供各个系统下的supervisor服务开机启动脚本，其中<a href="https://raw.githubusercontent.com/Supervisor/initscripts/master/centos-systemd-etcs" target="_blank" rel="external">centos-systemd-etcs</a>就是我们需要的CentOS 7下面的脚本。</p>
<p>建议直接复制脚本内容，然后添加到目录/etc/systemd/system下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/systemd/system/supervisord.service</div></pre></td></tr></table></figure>
<p>按键盘i建进入编辑模式，粘贴脚本内容后按键盘Esc键退出编辑模式，输入:wq回车，保存并退出。<br>然后运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> supervisord.service</div></pre></td></tr></table></figure>
<p>就完成了supervisor的开机启动，到此Shadowsocks已经在CentOS 7 x64下安装配置成功，运行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reboot</div></pre></td></tr></table></figure>
<p>重启服务器使服务生效，此时已经可以正常使用Shadowsocks服务。</p>
<h2 id="Shadowsocks服务优化"><a href="#Shadowsocks服务优化" class="headerlink" title="Shadowsocks服务优化"></a>Shadowsocks服务优化</h2><h3 id="系统层面"><a href="#系统层面" class="headerlink" title="系统层面"></a>系统层面</h3><p>基于kvm架构vps的优化(DO的主机正好可以用)</p>
<h4 id="优化内核参数"><a href="#优化内核参数" class="headerlink" title="优化内核参数"></a>优化内核参数</h4><p><code>vi /etc/sysctl.conf</code>直接把以下内容复制粘贴进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># max open files</div><div class="line">fs.file-max = 1024000</div><div class="line"># max read buffer</div><div class="line">net.core.rmem_max = 67108864</div><div class="line"># max write buffer</div><div class="line">net.core.wmem_max = 67108864</div><div class="line"># default read buffer</div><div class="line">net.core.rmem_default = 65536</div><div class="line"># default write buffer</div><div class="line">net.core.wmem_default = 65536</div><div class="line"># max processor input queue</div><div class="line">net.core.netdev_max_backlog = 4096</div><div class="line"># max backlog</div><div class="line">net.core.somaxconn = 4096</div><div class="line"></div><div class="line"># resist SYN flood attacks</div><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line"># reuse timewait sockets when safe</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line"># turn off fast timewait sockets recycling</div><div class="line">net.ipv4.tcp_tw_recycle = 0</div><div class="line"># short FIN timeout</div><div class="line">net.ipv4.tcp_fin_timeout = 30</div><div class="line"># short keepalive time</div><div class="line">net.ipv4.tcp_keepalive_time = 1200</div><div class="line"># outbound port range</div><div class="line">net.ipv4.ip_local_port_range = 10000 65000</div><div class="line"># max SYN backlog</div><div class="line">net.ipv4.tcp_max_syn_backlog = 4096</div><div class="line"># max timewait sockets held by system simultaneously</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000</div><div class="line"># TCP receive buffer</div><div class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</div><div class="line"># TCP write buffer</div><div class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</div><div class="line"># turn on path MTU discovery</div><div class="line">net.ipv4.tcp_mtu_probing = 1</div></pre></td></tr></table></figure>
<p>保存生效<code>sysctl -p</code></p>
<hr>
<h4 id="TCP优化"><a href="#TCP优化" class="headerlink" title="TCP优化"></a>TCP优化</h4><p>1.修改文件句柄数限制<br>ubuntu/centos均可修改<code>/etc/sysctl.conf</code><br>找到<code>fs.file-max</code>这一行，修改其值为<code>1024000</code>，并保存退出。然后执行<code>sysctl -p</code>使其生效<br>修改<code>vi /etc/security/limits.conf</code>文件，加入  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*               soft    nofile           512000</div><div class="line">*               hard    nofile          1024000</div></pre></td></tr></table></figure>
<p>针对centos,还需要修改<code>vi /etc/pam.d/common-session</code>文件，加入<br><code>session required pam_limits.so</code>  </p>
<p>2.修改<code>vi /etc/profile</code>文件，加入<br><code>ulimit -SHn 1024000</code><br>然后重启服务器执行<code>ulimit -n</code>，查询返回1024000即可。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sysctl.conf报错解决方法</div><div class="line">修复modprobe的：</div><div class="line">rm -f /sbin/modprobe </div><div class="line">ln -s /bin/true /sbin/modprobe</div><div class="line">修复sysctl的：</div><div class="line">rm -f /sbin/sysctl </div><div class="line">ln -s /bin/true /sbin/sysctl</div></pre></td></tr></table></figure>
<hr>
<p><del>#### 锐速</del><br>锐速官方已不再维护免费版本，目前破解版支持的内核太旧，放弃。</p>
<hr>
<h4 id="开启TCP-Fast-Open"><a href="#开启TCP-Fast-Open" class="headerlink" title="开启TCP Fast Open"></a>开启TCP Fast Open</h4><p>这个前提条件是需要服务器是Linux 3.7+的内核，如果满足条件，那就在服务端的<code>vi /etc/sysctl.conf</code>文件中再加上一行。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># turn on TCP Fast Open on both client and server side</div><div class="line">net.ipv4.tcp_fastopen = 3</div></pre></td></tr></table></figure>
<p>然后记得把<code>vi /etc/shadowsocks.json</code>配置文件中”fast_open”:配置为true。这样速度也将会有非常显著的提升。</p>
<hr>
<h4 id="开启TCP-BBR拥塞控制算法"><a href="#开启TCP-BBR拥塞控制算法" class="headerlink" title="开启TCP BBR拥塞控制算法"></a>开启TCP BBR拥塞控制算法</h4><p>BBR 目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 效果并不比速锐差<br>Linux kernel 4.9 已支持 tcp_bbr 下面简单讲述如何开启</p>
<ul>
<li>下载更换内核<br>最新内核查看<a href="http://elrepo.org/linux/kernel/el7/x86_64/RPMS/" target="_blank" rel="external">这里</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</div><div class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y</div></pre></td></tr></table></figure>
<ul>
<li>查看内核是否安装成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep kernel</div></pre></td></tr></table></figure>
<ul>
<li>更新 grub 系统引导文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/default/grub</div></pre></td></tr></table></figure>
<p>修改对应的字段为 GRUB_DEFAULT=0，然后重新编译启动项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</div></pre></td></tr></table></figure>
<ul>
<li>删除旧内核(可选)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum remove kernel</div></pre></td></tr></table></figure>
<p>最后重启<code>reboot</code>生效。</p>
<ul>
<li><p>注意，某些服务商可能需要首先将VPS配置为可自定义内核，然后grub2的配置才会生效。</p>
</li>
<li><p>开启bbr</p>
</li>
</ul>
<p>开机后 <code>uname -r</code>  看看内核是不是最新的，至少要大于4.9  </p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</div><div class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>保存生效<br><code>sysctl -p</code>  </p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sysctl net.ipv4.tcp_available_congestion_control</div><div class="line">sysctl net.ipv4.tcp_congestion_control</div></pre></td></tr></table></figure>
<p>如果结果都有<code>bbr</code>, 则证明你的内核已开启bbr  </p>
<p>执行<br><code>lsmod | grep bbr</code><br>看到有 tcp_bbr 模块即说明bbr已启动  </p>
<hr>
<h3 id="加密层面"><a href="#加密层面" class="headerlink" title="加密层面"></a>加密层面</h3><h4 id="安装M2Crypto"><a href="#安装M2Crypto" class="headerlink" title="安装M2Crypto"></a>安装M2Crypto</h4><p>这个可以提高SS的加密速度，安装办法:<br>先安装依赖包：<br><code>yum install -y openssl-devel gcc swig python-devel autoconf libtool</code><br>安装setuptools:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/iMeiji/shadowsocks_install/master/ez_setup.py</div><div class="line">python ez_setup.py install</div></pre></td></tr></table></figure>
<p>再通过pip安装M2Crypto:<br><code>pip install M2Crypto</code><br>或者<code>pip install M2Crypto --upgrade</code>  </p>
<hr>
<h4 id="2-2-安装-gevent"><a href="#2-2-安装-gevent" class="headerlink" title="2.2 安装 gevent"></a>2.2 安装 gevent</h4><p>安装 gevent可以提高 Shadowsocks 的性能。</p>
<p>CentOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y libevent</div><div class="line">pip install greenlet</div><div class="line">pip install gevent</div></pre></td></tr></table></figure>
<hr>
<h4 id="使用CHACHA20加密算法"><a href="#使用CHACHA20加密算法" class="headerlink" title="使用CHACHA20加密算法"></a>使用CHACHA20加密算法</h4><p>首先，安装libsodium，让系统支持chacha20算法。</p>
<p>CentOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">yum groupinstall &quot;Development Tools&quot;</div><div class="line">wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz</div><div class="line">tar zxf LATEST.tar.gz</div><div class="line">cd libsodium* </div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div><div class="line">vi /etc/ld.so.conf</div><div class="line">添加一行：</div><div class="line">/usr/local/lib</div><div class="line">保存退出后，运行命令：</div><div class="line">ldconfig</div></pre></td></tr></table></figure>
<p>然后修改ss加密方式:<br><code>vi /etc/shadowsocks.json</code><br>“method”:”aes-256-cfb”改成”method”:”chacha20”.</p>
<hr>
<h3 id="网络层面"><a href="#网络层面" class="headerlink" title="网络层面"></a>网络层面</h3><p>此外，选择合适的端口也能优化梯子的速度，广大SS用户的实践经验表明，检查站（GFW）存在一种机制来降低自身的运算压力，即常用的协议端口（如http，smtp，ssh，https，ftp等）的检查较少，所以建议SS绑定这些常用的端口（如：21，22，25，80，443），速度也会有显著提升。<br>如果你还要给小伙伴爬，那我建议开启多个端口而不是共用，这样网络会更加顺畅。  </p>
<h4 id="防火墙设置（如有）"><a href="#防火墙设置（如有）" class="headerlink" title="防火墙设置（如有）"></a>防火墙设置（如有）</h4><p>自动调整MTU<br><code>iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu</code> </p>
<p>开启 NAT （记得把 eth0 改成自己的网卡名）<br><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code>  </p>
<p>开启 IPv4 的转发<br><code>sysctl -w net.ipv4.ip_forward=1</code>  </p>
<p>打开 443 端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT -p tcp --dport 443 -j ACCEPT</div><div class="line">iptables -I INPUT -p udp --dport 443 -j ACCEPT</div></pre></td></tr></table></figure></p>
<p>重启防火墙iptables：<br><code>service iptables restart</code>  </p>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，这几天配置shadowsocks的过程便结束了，这里只是将我遇到的情况加以记录，并不能涵盖所有情况，如果碰到其他状况，那么<code>google</code>就好了。</p>
<p>:P</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于最近开始上Github较多，无意中发现Github推出了一个&lt;a href=&quot;https://education.github.com/pack&quot;&gt;学生开发者优惠大礼包&lt;/a&gt;，这对于囊中羞涩的学生来说真的是大大的福利，给Github一个大大的赞！&lt;/p&gt;
&lt;p&gt;这个优惠包里头包含很多开发者需要付费购买的服务或者工具的优惠券，其中有一个&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;的$50优惠券，对于一直想入一台VPS但又因为价格昂贵望而却步的我来说就是雪中送炭啊，于是我马上注册获取优惠券，随即开始折腾，这里把这两天折腾的过程记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://i-square.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="VPS" scheme="https://i-square.github.io/tags/VPS/"/>
    
      <category term="Shadowsocks" scheme="https://i-square.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>新的起点</title>
    <link href="https://i-square.github.io/post/%E6%96%B0%E7%9A%84%E8%B5%B7%E7%82%B9/"/>
    <id>https://i-square.github.io/post/新的起点/</id>
    <published>2017-02-25T09:27:39.000Z</published>
    <updated>2017-03-01T00:58:27.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从2013年我搭建的第一个<code>Wordpress</code>博客开始，我陆陆续续尝试过各种博客类网站，有自己搭建的<code>Wordpress</code>博客，也有诸如<code>点点网</code>和<code>lofter</code>这样的轻博客社区，但最终都是留下一篇<code>hello world</code>走人。</p>
<a id="more"></a>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>近两年随着<code>github</code>的火热，搭建在<code>github pages</code>上的博客也如雨后春笋一般噌噌地冒出来，我也想尝尝鲜，于是在大谷歌搜索到一篇文章：<a href="https://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a>，作者：<a href="https://wsgzao.github.io/" target="_blank" rel="external">wsgzao</a>，然后照猫画虎搭建了自己的博客，非常感谢原文博主分享自己的经验，让我这个门外汉也能轻松上手。</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>这次使用<code>Hexo + github</code>的博客我希望能够长时间更新下去，博客定位大方向是我自己的学习笔记、思考感悟，也会写一些生活随笔，说不定也会分享一些图片、音乐、视频等等，:)</p>
<h2 id="多说点儿"><a href="#多说点儿" class="headerlink" title="多说点儿"></a>多说点儿</h2><p>刚开始学习用<code>Markdown</code>写文章，还不是太习惯，用到的语法也只有一两种，慢慢完善吧，:P</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从2013年我搭建的第一个&lt;code&gt;Wordpress&lt;/code&gt;博客开始，我陆陆续续尝试过各种博客类网站，有自己搭建的&lt;code&gt;Wordpress&lt;/code&gt;博客，也有诸如&lt;code&gt;点点网&lt;/code&gt;和&lt;code&gt;lofter&lt;/code&gt;这样的轻博客社区，但最终都是留下一篇&lt;code&gt;hello world&lt;/code&gt;走人。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://i-square.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="博客" scheme="https://i-square.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://i-square.github.io/tags/hexo/"/>
    
      <category term="Github" scheme="https://i-square.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Post Test 发布测试</title>
    <link href="https://i-square.github.io/post/Post-Test-%E5%8F%91%E5%B8%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://i-square.github.io/post/Post-Test-发布测试/</id>
    <published>2017-02-24T06:33:36.000Z</published>
    <updated>2017-03-01T00:58:27.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先发布一篇测试文章，以后慢慢扩充。</p>
<p><del>龟速学习<code>Markdown</code>语法ing。</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;首先发布一篇测试文章，以后慢慢扩充。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;龟速学习&lt;code&gt;Markdown&lt;/code&gt;语法ing。&lt;/del&gt;&lt;/
    
    </summary>
    
      <category term="测试" scheme="https://i-square.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="https://i-square.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://i-square.github.io/post/hello-world/"/>
    <id>https://i-square.github.io/post/hello-world/</id>
    <published>2017-02-23T07:15:45.000Z</published>
    <updated>2017-03-01T00:58:27.436Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://i-square.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="https://i-square.github.io/tags/test/"/>
    
  </entry>
  
</feed>
