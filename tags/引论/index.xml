<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>引论 on 平方君的后花园</title><link>https://i-square.github.io/tags/%E5%BC%95%E8%AE%BA/</link><description>Recent content in 引论 on 平方君的后花园</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 24 Mar 2017 14:22:23 +0000</lastBuildDate><atom:link href="https://i-square.github.io/tags/%E5%BC%95%E8%AE%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>数据结构学习笔记（一）：引论</title><link>https://i-square.github.io/p/Data-structure-study-notes-1-introduction/</link><pubDate>Fri, 24 Mar 2017 14:22:23 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-1-introduction/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>介绍基本数学知识&lt;/li>
&lt;li>简要复习递归&lt;/li>
&lt;li>介绍用到的C++知识&lt;/li>
&lt;/ul>
&lt;h2 id="递归的四条基本法则">递归的四条基本法则&lt;/h2>
&lt;ol>
&lt;li>基准情形。必须总有某些基准情形不用递归就能求解。&lt;/li>
&lt;li>不断推进。对于那些需要递归求解的情形，递归调用必须总能够朝着基准情形的方向推进。&lt;/li>
&lt;li>设计法则。假设所有的递归调用都能运行。&lt;/li>
&lt;li>合成效益法则。在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。&lt;/li>
&lt;/ol></description></item></channel></rss>