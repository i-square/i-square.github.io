<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>平方君的后花园</title><link>https://i-square.github.io/</link><description>Recent content on 平方君的后花园</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://i-square.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>书生·浦语大模型实战营（二）：轻松玩转书生·浦语大模型趣味Demo</title><link>https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/</link><pubDate>Wed, 10 Jan 2024 15:44:22 +0800</pubDate><guid>https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/</guid><description>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/head.png" alt="Featured image of post 书生·浦语大模型实战营（二）：轻松玩转书生·浦语大模型趣味Demo" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文为&lt;a class="link" href="https://github.com/InternLM/tutorial" target="_blank" rel="noopener"
>书生·浦语大模型实战营&lt;/a>的课程笔记系列第二节&lt;/p>
&lt;ul>
&lt;li>教学视频：&lt;a class="link" href="https://www.bilibili.com/video/BV1Ci4y1z72H/" target="_blank" rel="noopener"
>B站_BV1Ci4y1z72H&lt;/a>&lt;/li>
&lt;li>配套文档：&lt;a class="link" href="https://github.com/InternLM/tutorial/blob/main/helloworld/hello_world.md" target="_blank" rel="noopener"
>InternLM/tutorial_helloworld&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="笔记">笔记&lt;/h2>
&lt;p>由于配套的说明文档已经记录的相当详细并且图文并茂，这节课丝毫没有记录笔记的必要，所以本文仅仅记录课后作业&lt;/p>
&lt;h2 id="基础作业">基础作业&lt;/h2>
&lt;h3 id="hf模型下载">HF模型下载&lt;/h3>
&lt;blockquote>
&lt;p>目标：熟悉 &lt;code>hugging face&lt;/code> 下载功能，使用 &lt;code>huggingface_hub&lt;/code> python 包，下载 &lt;code>InternLM-20B&lt;/code> 的 &lt;code>config.json&lt;/code> 文件到本地（需截图下载过程）。&lt;/p>
&lt;/blockquote>
&lt;p>这个无需多言，只是基本的命令使用，需要注意的是，由于众所周知的原因，国内直接下载 &lt;code>hugging face&lt;/code> 是不行的，这里使用镜像站 &lt;a class="link" href="https://hf-mirror.com/" target="_blank" rel="noopener"
>hf-mirror&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>结果图：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/0_hf_download.png"
width="1621"
height="776"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/0_hf_download_hu499ec520d3afab854757ac9da67bb810_11368_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/0_hf_download_hu499ec520d3afab854757ac9da67bb810_11368_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="0_hf_download"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="501px"
>&lt;/p>
&lt;h3 id="浦语7b模型部署demo">浦语7B模型部署demo&lt;/h3>
&lt;blockquote>
&lt;p>目标：使用 InternLM-Chat-7B 模型生成 300 字的小故事（需截图）。&lt;/p>
&lt;/blockquote>
&lt;p>这里我们可以使用两种demo来完成，分别是 &lt;code>cli_demo&lt;/code> 和 &lt;code>web_demo&lt;/code>，详细步骤参考配套教学文档，以下为大致总结：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>环境准备：&lt;/strong>
&lt;ul>
&lt;li>在 &lt;a class="link" href="https://studio.intern-ai.org.cn/" target="_blank" rel="noopener"
>InternStudio&lt;/a> 平台选择 A100(1/4) 的配置，使用 &lt;code>Cuda11.7-conda&lt;/code> 镜像。&lt;/li>
&lt;li>打开开发机，进入终端，切换到 &lt;code>bash&lt;/code> 环境。&lt;/li>
&lt;li>使用提供的脚本克隆并激活 &lt;code>pytorch 2.0.1&lt;/code> 的 &lt;code>conda&lt;/code> 环境，然后安装所需依赖。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>模型下载：&lt;/strong>
&lt;ul>
&lt;li>复制已准备好的 &lt;code>InternLM&lt;/code> 模型到指定目录，或使用 &lt;code>modelscope&lt;/code> 中的 &lt;code>snapshot_download&lt;/code> 函数下载模型（&lt;strong>推荐&lt;/strong>，跑满带宽），或在 &lt;code>huggingface&lt;/code>、&lt;code>OpenXLab&lt;/code> 等处下载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>代码准备：&lt;/strong>
&lt;ul>
&lt;li>在 &lt;code>/root&lt;/code> 路径下新建 &lt;code>code&lt;/code> 目录，&lt;code>clone&lt;/code> 指定版本的代码。&lt;/li>
&lt;li>在 &lt;code>/root/code/InternLM&lt;/code> 目录下新建 &lt;code>cli_demo.py&lt;/code> 文件，使用 &lt;code>transformers&lt;/code> 和 &lt;code>torch&lt;/code> 库运行大模型。&lt;/li>
&lt;li>修改 &lt;code>/root/code/InternLM/web_demo.py&lt;/code> 中的模型路径为本地路径。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>终端运行：&lt;/strong>
&lt;ul>
&lt;li>运行 &lt;code>xxx_demo.py&lt;/code> 文件，即可体验 &lt;code>InternLM-Chat-7B&lt;/code> 模型的对话能力。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>使用的prompt：帮我生成一个300字的小故事，主角是打工人叫平方君，内容是他通过不断努力升职加薪、当上总经理、出任CEO、迎娶白富美、走上人生巅峰的励志故事&lt;/em>&lt;/p>
&lt;h4 id="cli_demo">cli_demo&lt;/h4>
&lt;ul>
&lt;li>结果图：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_cli_demo.png"
width="1577"
height="274"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_cli_demo_hu99fda8c5f448e7626395faf60b70fb9d_12647_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_cli_demo_hu99fda8c5f448e7626395faf60b70fb9d_12647_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="1_cli_demo"
class="gallery-image"
data-flex-grow="575"
data-flex-basis="1381px"
>&lt;/p>
&lt;h4 id="web_demo">web_demo&lt;/h4>
&lt;p>由于 &lt;a class="link" href="https://studio.intern-ai.org.cn/" target="_blank" rel="noopener"
>InternStudio&lt;/a> 平台的开发机不能直接通过web访问，所以需要做一下端口映射，原理是利用 &lt;code>ssh&lt;/code> 做端口转发。&lt;/p>
&lt;p>在本地主机运行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -CNg -L 8008:127.0.0.1:8008 root@ssh.intern-ai.org.cn -p &lt;span class="m">34664&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>各部分解释如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ssh:&lt;/strong> 启动SSH客户端程序。&lt;/li>
&lt;li>&lt;strong>-C:&lt;/strong> 启用压缩。数据传输时进行压缩，提高传输效率。&lt;/li>
&lt;li>&lt;strong>-N:&lt;/strong> 不执行任何命令，主要用于纯粹建立连接。在这里，它告诉SSH客户端不要执行远程命令。&lt;/li>
&lt;li>&lt;strong>-g:&lt;/strong> 允许远程主机连接到本地的转发端口。在这里，它允许其他主机连接到本地端口8008。&lt;/li>
&lt;li>&lt;strong>-L 8008:127.0.0.1:8008:&lt;/strong> 设置本地端口转发。将本地端口8008转发到远程主机的127.0.0.1（即本地主机）的8008端口。&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="mailto:root@ssh.intern-ai.org.cn" >root@ssh.intern-ai.org.cn&lt;/a>:&lt;/strong> 远程SSH服务器的用户名和主机地址。&lt;/li>
&lt;li>&lt;strong>-p 34664:&lt;/strong> 指定SSH服务器的端口号。&lt;/li>
&lt;/ul>
&lt;p>此命令的目的是在本地端口&lt;code>8008&lt;/code>上创建一个SSH隧道，将流量转发到远程服务器上的相同端口，同时允许其他主机通过该远程服务器连接到本地端口。&lt;/p>
&lt;hr>
&lt;p>作业部分：&lt;/p>
&lt;ul>
&lt;li>终端命令：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_web_demo_cmd.png"
width="1199"
height="315"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_web_demo_cmd_hu21a629fe185c1cf89f832c6c759b0d48_11983_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_web_demo_cmd_hu21a629fe185c1cf89f832c6c759b0d48_11983_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="1_web_demo_cmd"
class="gallery-image"
data-flex-grow="380"
data-flex-basis="913px"
>&lt;/p>
&lt;ul>
&lt;li>结果图：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_web_demo.png"
width="744"
height="783"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_web_demo_hu710490253f319d20449554139d9d539f_37125_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/1_web_demo_hu710490253f319d20449554139d9d539f_37125_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="1_web_demo"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/p>
&lt;h2 id="进阶作业可选做">进阶作业（可选做）&lt;/h2>
&lt;h3 id="lagent部署demo">Lagent部署demo&lt;/h3>
&lt;blockquote>
&lt;p>目标：完成 &lt;code>Lagent&lt;/code> 工具调用 Demo 创作部署（需截图）&lt;/p>
&lt;/blockquote>
&lt;p>由于涉及到图形化操作，这里只有 &lt;code>web_demo&lt;/code>，详细步骤参考配套教学文档，以下为大致总结：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>环境准备：&lt;/strong>
&lt;ul>
&lt;li>沿用之前的环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>模型下载：&lt;/strong>
&lt;ul>
&lt;li>不再赘述。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Lagent 安装和修改代码：&lt;/strong>
&lt;ul>
&lt;li>切换到 &lt;code>/root/code&lt;/code> 目录，克隆 &lt;code>lagent&lt;/code> 仓库，并通过 &lt;code>pip install -e .&lt;/code> 源码安装。&lt;/li>
&lt;li>修改 &lt;code>react_web_demo.py&lt;/code> 文件，替换为相应代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Demo 运行：&lt;/strong>
&lt;ul>
&lt;li>在终端运行 &lt;code>streamlit&lt;/code> 命令，启动 &lt;code>Web&lt;/code> 页面。&lt;/li>
&lt;li>在浏览器中访问 &lt;code>http://127.0.0.1:8008&lt;/code> 查看 Demo。&lt;/li>
&lt;li>选择 &lt;code>InternLM&lt;/code> 模型，输入问题，观察 &lt;code>Lagent&lt;/code> 调度并处理的过程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>作业部分：&lt;/p>
&lt;ul>
&lt;li>终端命令：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/3_lagent_web_demo_cmd.png"
width="1215"
height="372"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/3_lagent_web_demo_cmd_huf9307425b8e4bd7b19b23abd694151b4_22417_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/3_lagent_web_demo_cmd_huf9307425b8e4bd7b19b23abd694151b4_22417_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="3_lagent_web_demo_cmd"
class="gallery-image"
data-flex-grow="326"
data-flex-basis="783px"
>&lt;/p>
&lt;ul>
&lt;li>结果图：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/3_lagent_web_demo.png"
width="1152"
height="990"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/3_lagent_web_demo_hu8077bf684fa137e1dd412753bccca3a1_25738_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/3_lagent_web_demo_hu8077bf684fa137e1dd412753bccca3a1_25738_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="3_lagent_web_demo"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;h3 id="浦语灵笔部署demo">浦语·灵笔部署demo&lt;/h3>
&lt;blockquote>
&lt;p>目标：完成浦语·灵笔的图文理解及创作部署（需截图）&lt;/p>
&lt;/blockquote>
&lt;p>由于涉及到图形化操作，这里也只有 &lt;code>web_demo&lt;/code>，详细步骤参考配套教学文档，以下为大致总结：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>环境准备：&lt;/strong>
&lt;ul>
&lt;li>继续沿用之前的环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>模型下载：&lt;/strong>
&lt;ul>
&lt;li>用同样的方式，准备 &lt;code>internlm-xcomposer-7b&lt;/code> 模型到指定目录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>代码准备：&lt;/strong>
&lt;ul>
&lt;li>在 &lt;code>/root/code&lt;/code> 目录下克隆 &lt;code>InternLM-XComposer&lt;/code> 仓库的代码，切换到指定的 commit 版本，以便对齐教学结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Demo 运行：&lt;/strong>
&lt;ul>
&lt;li>在终端运行 &lt;code>web_demo.py&lt;/code> 文件，启动 &lt;code>Web&lt;/code> 页面。&lt;/li>
&lt;li>在浏览器中访问 &lt;code>http://127.0.0.1:8008&lt;/code>，体验图文理解创作的功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>作业部分： 从终端的log来看，浦语·灵笔的创作流程大致上是先用语言模型生成文章，再选取合适的图片插入点，然后在数据库里根据关键词搜索匹配的图片，之后下载图片，并组合生成一份 &lt;code>markdown&lt;/code> 文档。&lt;/p>
&lt;ul>
&lt;li>终端命令：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo_cmd.png"
width="2206"
height="5648"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo_cmd_huc420ff8248919de7c2b5d7333db1365b_566511_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo_cmd_huc420ff8248919de7c2b5d7333db1365b_566511_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="4_xcomposer_web_demo_cmd"
class="gallery-image"
data-flex-grow="39"
data-flex-basis="93px"
>&lt;/p>
&lt;ul>
&lt;li>结果图1-图文生成：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo1.png"
width="1649"
height="1314"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo1_huad2742065b10b65ab0bb83bbc250b0e4_221384_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo1_huad2742065b10b65ab0bb83bbc250b0e4_221384_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="4_xcomposer_web_demo1"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;ul>
&lt;li>结果图2-多模态对话：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo2.png"
width="1581"
height="1105"
srcset="https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo2_hu3d2a8f82c46d0e32ef88acc02b980a77_66778_480x0_resize_box_3.png 480w, https://i-square.github.io/p/InternLM-tutorial-campsection2-Easy-Fun-with-InternLM-Entertaining-Demo/homework/4_xcomposer_web_demo2_hu3d2a8f82c46d0e32ef88acc02b980a77_66778_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="4_xcomposer_web_demo2"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p></description></item><item><title>书生·浦语大模型实战营（一）：书生·浦语大模型全链路开源体系</title><link>https://i-square.github.io/p/InternLM-tutorial-campsection1-LLM-Full-Stack-Open-Source-Ecosystem/</link><pubDate>Tue, 09 Jan 2024 18:50:55 +0800</pubDate><guid>https://i-square.github.io/p/InternLM-tutorial-campsection1-LLM-Full-Stack-Open-Source-Ecosystem/</guid><description>&lt;img src="https://i-square.github.io/p/InternLM-tutorial-campsection1-LLM-Full-Stack-Open-Source-Ecosystem/camp.png" alt="Featured image of post 书生·浦语大模型实战营（一）：书生·浦语大模型全链路开源体系" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文为&lt;a class="link" href="https://github.com/InternLM/tutorial" target="_blank" rel="noopener"
>书生·浦语大模型实战营&lt;/a>的课程笔记系列第一节，课程地址：&lt;a class="link" href="https://www.bilibili.com/video/BV1Rc411b7ns/" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1Rc411b7ns/&lt;/a>&lt;/p>
&lt;h2 id="从专用模型到通用大模型">从专用模型到通用大模型&lt;/h2>
&lt;p>在过去，人工智能领域的发展一直遵循着一个基本原则：一个模型对应一个场景或者任务。然而，随着技术的进步和需求的增长，这一格局正在发生深刻的变化。如今，我们正迈向一个新的时代，一个模型不再局限于一个场景或任务，而是可以应用于多个场景、多模态的复杂环境中。&lt;/p>
&lt;h2 id="书生浦语大模型发展历程">书生·浦语大模型发展历程&lt;/h2>
&lt;p>书生·浦语大模型的发展历程彰显了这一变革的重要性。它从轻量级的7B社区模型，逐步升级到中量级的20B商业模型，再到重量级的123B全场景模型。这一演进不仅仅是在模型规模上的提升，更是对多模态、多场景应用需求的积极响应。&lt;/p>
&lt;h3 id="interlm-20b全面领先的开源模型">InterLM-20B：全面领先的开源模型&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/InternLM/InternLM" target="_blank" rel="noopener"
>InterLM-20B&lt;/a>是一款千亿参数级别的开源模型，其性能在全球范围内处于领先地位。与相近规模的Llama-33B、Llama2-13B以及国内主流的7B、13B开源模型相比，InterLM-20B在不足三分之一的参数量下，却达到了Llama2-70B的水平。&lt;/p>
&lt;h2 id="从模型到应用六个关键步骤">从模型到应用：六个关键步骤&lt;/h2>
&lt;h3 id="第一步模型选型">第一步：模型选型&lt;/h3>
&lt;p>在应用场景中，根据多个大模型的相关维度进行能力比较，并进行模型评测。初步选型后，可确定意向大模型。&lt;/p>
&lt;h3 id="第二步评估业务场景复杂度">第二步：评估业务场景复杂度&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>业务场景简单：&lt;/strong> 如果业务场景不太复杂，可以直接将选定的模型应用于场景中。&lt;/li>
&lt;li>&lt;strong>业务场景复杂：&lt;/strong> 对于复杂场景，通常直接使用开源模型难以满足需求，需要进一步微调、进行prompt工程等构建工作。&lt;/li>
&lt;/ul>
&lt;h3 id="第三步判断微调策略">第三步：判断微调策略&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>全参数微调：&lt;/strong> 若算力足够，可以进行全参数微调，提高模型性能。&lt;/li>
&lt;li>&lt;strong>部分参数微调：&lt;/strong> 如果算力受限，只能进行部分参数微调，固定大部分参数，调整一小部分参数。&lt;/li>
&lt;/ul>
&lt;h3 id="第四步构建智能体">第四步：构建智能体&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>模型与环境交互：&lt;/strong> 考虑模型与环境的交互，特别是如果需要调用外部API或与已有业务数据库交互，则需要构建智能体。&lt;/li>
&lt;li>&lt;strong>无环境交互：&lt;/strong> 如果模型在业务场景中不需要与环境进行交互，可以直接将微调好的模型应用于场景。&lt;/li>
&lt;/ul>
&lt;h3 id="第五步模型评测与应用上线">第五步：模型评测与应用上线&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>模型评测：&lt;/strong> 进行模型评测，确保在实际场景中表现良好。&lt;/li>
&lt;li>&lt;strong>上线或迭代：&lt;/strong> 根据评测结果，决定是否上线应用或者继续迭代模型。&lt;/li>
&lt;/ul>
&lt;h3 id="第六步模型部署">第六步：模型部署&lt;/h3>
&lt;p>考虑软件系统相关性能、安全、功能等方面内容：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>资源优化：&lt;/strong> 考虑如何以更少的资源部署模型。&lt;/li>
&lt;li>&lt;strong>吞吐量提升：&lt;/strong> 提升整个应用的吞吐量，确保在生产环境中的性能表现。&lt;/li>
&lt;/ul>
&lt;p>这六个步骤构成了从选择模型到应用部署的全链条，确保在实际应用中大模型能够充分发挥作用。&lt;/p>
&lt;h2 id="书生-浦语全链条开源开放体系">书生-浦语全链条开源开放体系&lt;/h2>
&lt;p>书生·浦语大模型打破了传统的人工智能应用模式，提出了全链条开源开放体系。这一体系涵盖了从数据到预训练、微调、部署、评测到应用的全过程，为通用人工智能的实现提供了完整的解决方案。数据（&lt;a class="link" href="https://github.com/opendatalab/WanJuan1.0" target="_blank" rel="noopener"
>书生·万卷&lt;/a>）作为起点，经过&lt;a class="link" href="https://github.com/InternLM/InternLM" target="_blank" rel="noopener"
>IntermLM-Train&lt;/a>的预训练，使用&lt;a class="link" href="https://github.com/InternLM/xtuner" target="_blank" rel="noopener"
>XTuner&lt;/a>进行微调，通过&lt;a class="link" href="https://github.com/InternLM/lmdeploy" target="_blank" rel="noopener"
>LMDeploy&lt;/a>实现部署，通过&lt;a class="link" href="https://github.com/open-compass/opencompass" target="_blank" rel="noopener"
>OpenCompass&lt;/a>进行全面评测，最终应用在&lt;a class="link" href="https://github.com/InternLM/Lagent" target="_blank" rel="noopener"
>Lagent&lt;/a>构建的多模态智能体中。&lt;/p>
&lt;p>这一全链条开源开放体系，为大模型的发展提供了创新性的方法，促使人工智能更好地服务于多样化的现实需求。&lt;/p>
&lt;h3 id="数据覆盖多模态和任务">数据：覆盖多模态和任务&lt;/h3>
&lt;p>全链条开源体系以&lt;a class="link" href="https://github.com/opendatalab/WanJuan1.0" target="_blank" rel="noopener"
>书生-万卷&lt;/a>为基础，涵盖了多模态和多任务的数据需求，为模型的学习提供了全面支持。&lt;/p>
&lt;h4 id="opendatalab开放数据平台">OpenDataLab：开放数据平台&lt;/h4>
&lt;p>&lt;a class="link" href="https://github.com/opendatalab" target="_blank" rel="noopener"
>OpenDataLab&lt;/a>作为开放数据平台，不仅包含丰富多样的开放数据，还为大模型的发展提供了数据支持和实验平台。&lt;/p>
&lt;h3 id="预训练并行训练极致优化">预训练：并行训练，极致优化&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/InternLM/InternLM" target="_blank" rel="noopener"
>InterLM&lt;/a>采用并行训练的方式，通过极致优化实现了高效的预训练，为模型的通用性奠定基础。&lt;/p>
&lt;h3 id="微调xtuner支持全参数微调支持lora等低成本微调">微调：XTuner，支持全参数微调，支持Lora等低成本微调&lt;/h3>
&lt;p>微调阶段使用&lt;a class="link" href="https://github.com/InternLM/xtuner" target="_blank" rel="noopener"
>XTuner&lt;/a>工具，支持全参数微调，同时还支持诸如Lora等低成本微调方法，使模型更好地适应各种特定任务。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ul>
&lt;li>增量续训：让基座模型学习新知识，垂直领域&lt;/li>
&lt;li>有监督微调：让模型学会理解和遵循各种指令。一般采用全量参数微调和部分参数微调等方法。&lt;/li>
&lt;li>多种微调算法：多种微调策略与算法，覆盖各类SFT场景。&lt;/li>
&lt;li>适配多种开源生态：支持加载HuggingFace、ModelScope模型或者数据级&lt;/li>
&lt;li>自动优化加速：开发者无需关注复杂的显存优化和计算加速细节&lt;/li>
&lt;/ul>
&lt;h3 id="部署lmdeploy全链路部署性能领先">部署：LMDeploy，全链路部署，性能领先&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/InternLM/lmdeploy" target="_blank" rel="noopener"
>LMDeploy&lt;/a>提供了全链路部署的解决方案，包括模型轻量化、推理和服务，使得大模型在GPU上的部署更加高效，性能领先。&lt;/p>
&lt;h3 id="评测opencompass全方位评测性能可以复现全球领先的大模型开源评测体系">评测：OpenCompass，全方位评测，性能可以复现，全球领先的大模型开源评测体系&lt;/h3>
&lt;p>评测阶段使用&lt;a class="link" href="https://github.com/open-compass/opencompass" target="_blank" rel="noopener"
>OpenCompass&lt;/a>工具，全方位评测模型性能，保证了评测结果的复现性，成为全球领先的大模型开源评测体系。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ul>
&lt;li>丰富模型支持：开源模型、API模型一站式评测。&lt;/li>
&lt;li>分布式高效评测：支持千亿参数模型在海量数据集上分布式评测。&lt;/li>
&lt;li>便捷的数据集接口：支持社区用户根据自身需求快速添加自定义数据集。&lt;/li>
&lt;li>敏捷的能力迭代：每周更新大模型能力榜单。&lt;/li>
&lt;/ul>
&lt;h3 id="应用legentagentlego-支持多种智能体支持代码解释器和多种工具">应用：Legent、AgentLego 支持多种智能体，支持代码解释器和多种工具&lt;/h3>
&lt;p>最终，模型的应用在&lt;a class="link" href="https://github.com/InternLM/Lagent" target="_blank" rel="noopener"
>Legent&lt;/a>和&lt;a class="link" href="https://github.com/InternLM/Lagent" target="_blank" rel="noopener"
>AgentLego&lt;/a>等多种智能体中得以体现，支持代码解释器和多种工具，实现了多模态智能体的灵活应用。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ul>
&lt;li>丰富的工具集合，尤其是提供了大量视觉、多模态相关领域的工具。&lt;/li>
&lt;li>支持多个主流智能体系统，如LangChain、Transformers Agent、Lagent等。&lt;/li>
&lt;li>灵活的多模态工具调用接口，可以轻松支持各类输入输出格式的工具函数&lt;/li>
&lt;li>一键式远程工具部署，轻松使用和调试大模型智能体。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>相关链接：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>书生·浦语大模型实战营地址：&lt;a class="link" href="https://github.com/InternLM/tutorial" target="_blank" rel="noopener"
>https://github.com/InternLM/tutorial&lt;/a>&lt;/li>
&lt;li>书生·万卷开源地址：&lt;a class="link" href="https://github.com/opendatalab/WanJuan1.0" target="_blank" rel="noopener"
>https://github.com/opendatalab/WanJuan1.0&lt;/a>&lt;/li>
&lt;li>InternLM开源地址：&lt;a class="link" href="https://github.com/InternLM/InternLM" target="_blank" rel="noopener"
>https://github.com/InternLM/InternLM&lt;/a>&lt;/li>
&lt;li>XTuner开源地址：&lt;a class="link" href="https://github.com/InternLM/xtuner" target="_blank" rel="noopener"
>https://github.com/InternLM/xtuner&lt;/a>&lt;/li>
&lt;li>LMDeploy开源地址：&lt;a class="link" href="https://github.com/InternLM/lmdeploy" target="_blank" rel="noopener"
>https://github.com/InternLM/lmdeploy&lt;/a>&lt;/li>
&lt;li>OpenCompass开源地址：&lt;a class="link" href="https://github.com/open-compass/opencompass" target="_blank" rel="noopener"
>https://github.com/open-compass/opencompass&lt;/a>&lt;/li>
&lt;li>OpenDataLab地址：&lt;a class="link" href="https://opendatalab.org.cn/" target="_blank" rel="noopener"
>https://opendatalab.org.cn/&lt;/a>&lt;/li>
&lt;li>OpenDataLab开源地址：&lt;a class="link" href="https://github.com/opendatalab" target="_blank" rel="noopener"
>https://github.com/opendatalab&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>体验GitHub Copilot Labs：探索AI在编程领域的无限可能</title><link>https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/</link><pubDate>Wed, 15 Mar 2023 13:15:09 +0800</pubDate><guid>https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/</guid><description>&lt;img src="https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/copilot.svg" alt="Featured image of post 体验GitHub Copilot Labs：探索AI在编程领域的无限可能" />&lt;h2 id="github-copilot-labs">GitHub Copilot Labs&lt;/h2>
&lt;p>GitHub Copilot是一个基于人工智能的编程助手，它可以根据你输入的代码、注释、变量名等信息，自动给出可能符合你意图的代码建议。它可以帮助你快速完成各种编程任务，从简单的函数定义到复杂的算法实现。&lt;/p>
&lt;p>GitHub Copilot Labs是一个与GitHub Copilot配套使用的VS Code扩展插件，它提供了一些实验性的功能，用来探索人工智能在编程领域的更多可能性。目前有四个功能可用：explain、translate、IDE Brushes和test generation，目前我只体验了前两个功能。&lt;/p>
&lt;h2 id="安装和使用">安装和使用&lt;/h2>
&lt;p>要使用GitHub Copilot Labs，首先需要安装VS Code，并且拥有一个GitHub Copilot许可证。如果你还没有许可证，可以在&lt;a class="link" href="https://github.com/features/copilot" target="_blank" rel="noopener"
>这里&lt;/a>申请一个免费试用或付费购买。&lt;/p>
&lt;p>然后，在VS Code的扩展市场中搜索并安装“Copilot Labs”这个插件。安装完成后，你会看到VS Code侧边栏上出现了一个Copilot图标。点击这个图标，就可以打开Copilot Labs面板，并看到四个不同的功能选项卡。&lt;/p>
&lt;h2 id="explain功能解释代码">explain功能：解释代码&lt;/h2>
&lt;p>explain功能是用来帮助你理解代码的含义和作用的。当你选中一段代码，并按下 &lt;code>Ctrl+Shift+P（Windows/Linux）&lt;/code> 或 &lt;code>Command+Shift+P（Mac）&lt;/code> 打开命令面板时，你可以输入 &lt;code>Copilot: Explain&lt;/code> 来激活这个功能。然后，在弹出的对话框中输入一个问题，比如 &lt;code>what does this code do?&lt;/code> 或 &lt;code>how to use this function?&lt;/code> 等等。Copilot会尝试根据选中的代码给出一个简洁明了的回答，类似于一个教程或文档。你可以通过点击 &lt;code>Ask Copilot&lt;/code> 按钮来重复这个过程，直到你满意为止。&lt;/p>
&lt;blockquote>
&lt;p>当然也有更直观的操作方式，如图，只需选中一段代码，在左侧栏中即可点击 &lt;code>Ask Copilot&lt;/code> 按钮：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/screenshots/2023-03-15-13-51-11.png"
width="293"
height="502"
srcset="https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/screenshots/2023-03-15-13-51-11_hu89a107b293ad3d1a3f8232b62910f562_18470_480x0_resize_box_3.png 480w, https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/screenshots/2023-03-15-13-51-11_hu89a107b293ad3d1a3f8232b62910f562_18470_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="explain界面"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="140px"
>&lt;/p>
&lt;h3 id="explain功能示例">explain功能示例&lt;/h3>
&lt;ul>
&lt;li>Python：如何使用factorial函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Explain code: how to use this function?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copilot answer:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">This function calculates the factorial of a given number n. The factorial of n is defined as the product of all positive integers from 1 to n. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">To use this function, you can call it with an argument that is a non-negative integer. For example:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># prints 120&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># prints 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># raises an exception&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>JavaScript：如何反转字符串&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Explain code: what does this code do?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">reverseString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">reversed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reversed&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">reversed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copilot answer:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">This&lt;/span> &lt;span class="nx">code&lt;/span> &lt;span class="nx">defines&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">named&lt;/span> &lt;span class="nx">reverseString&lt;/span> &lt;span class="nx">that&lt;/span> &lt;span class="nx">takes&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">string&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">an&lt;/span> &lt;span class="nx">argument&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">returns&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">string&lt;/span> &lt;span class="nx">that&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">reverse&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">original&lt;/span> &lt;span class="nx">one&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="nx">For&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reverseString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">returns&lt;/span> &lt;span class="s2">&amp;#34;olleh&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">The&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">uses&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">loop&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">iterate&lt;/span> &lt;span class="nx">over&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">characters&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="nx">string&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">beginning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">concatenates&lt;/span> &lt;span class="nx">them&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">variable&lt;/span> &lt;span class="nx">named&lt;/span> &lt;span class="nx">reversed&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="nx">At&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">loop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reversed&lt;/span> &lt;span class="nx">contains&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">reversed&lt;/span> &lt;span class="nx">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">which&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">returned&lt;/span> &lt;span class="nx">by&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="translate功能翻译代码">translate功能：翻译代码&lt;/h2>
&lt;p>translate功能是用来帮助你把代码从一种编程语言翻译成另一种编程语言的。当你选中一段代码，并按下 &lt;code>Ctrl+Shift+P（Windows/Linux）&lt;/code> 或 &lt;code>Command+Shift+P（Mac）&lt;/code> 打开命令面板时，你可以输入 &lt;code>Copilot: Translate&lt;/code> 来激活这个功能。然后，在弹出的对话框中选择你想要翻译成的目标语言，比如Python、Ruby、Java等等。Copilot会尝试根据选中的代码生成等价的代码，并显示在编辑器右侧的小窗口中。你可以按下Tab键或点击小窗口来接受Copilot生成的代码，也可以按下Esc键或点击其他地方来忽略它。&lt;/p>
&lt;blockquote>
&lt;p>类似地，只需选中一段代码，在左侧栏中即可点击 &lt;code>Ask Copilot&lt;/code> 按钮来转换代码：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/screenshots/2023-03-15-13-51-51.png"
width="289"
height="470"
srcset="https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/screenshots/2023-03-15-13-51-51_huf39538feaadfd95facc96f2001a27d0e_13051_480x0_resize_box_3.png 480w, https://i-square.github.io/p/Experience-GitHub-Copilot-Labs-Explore-the-infinite-possibilities-of-AI-in-programming/screenshots/2023-03-15-13-51-51_huf39538feaadfd95facc96f2001a27d0e_13051_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="language translation界面"
class="gallery-image"
data-flex-grow="61"
data-flex-basis="147px"
>&lt;/p>
&lt;h3 id="translate功能示例">translate功能示例&lt;/h3>
&lt;ul>
&lt;li>Python到Rust：计算阶乘&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Translate code into: Rust&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copilot answer:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>JavaScript到C#：反转字符串&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Translate code into: C#
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">reverseString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">reversed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reversed&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">reversed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copilot answer:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span> &lt;span class="n">reverseString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">string&lt;/span> &lt;span class="n">reversed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Length&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">&amp;gt;=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">--)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reversed&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">reversed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="体验感想">体验感想&lt;/h2>
&lt;p>使用GitHub Copilot Labs一段时间后，我觉得它是一个非常棒的工具，能够给我带来很多编程上的便利和帮助。它让我写代码更快更轻松，理解代码更容易更深入，修改代码更直观更灵活，测试代码更方便更有效。它也让我有机会学习和尝试一些新的编程语言和框架，增加我的知识和技能。&lt;/p>
&lt;p>当然，GitHub Copilot Labs也不是万能的，它还有一些需要改进和完善的地方。比如：&lt;/p>
&lt;ul>
&lt;li>它需要联网才能工作，如果网络出现问题或中断，就无法获得代码建议。&lt;/li>
&lt;li>它不能保证生成的代码都是正确、安全、高效、规范的，需要我们自己检查和验证。&lt;/li>
&lt;li>它不能取代我们作为程序员的创造力、逻辑思维、问题解决能力等核心素质。&lt;/li>
&lt;/ul>
&lt;p>所以，我认为GitHub Copilot Labs是一个很好的辅助工具，但不是一个替代工具。它可以节省我们的时间和精力，但不能代替我们的主观判断和责任意识。我们应该合理地使用它，并且不断地学习和进步。&lt;/p>
&lt;p>总之，我非常喜欢GitHub Copilot Labs，并且期待它未来能够发展得更好。我也建议你试一试这个工具，并且分享你自己的反馈和意见。让我们一起探索人工智能在编程领域的更多可能性吧！&lt;/p>
&lt;h2 id="真感想">真·感想&lt;/h2>
&lt;p>作为一个程序员，体验过new bing和copilot之后，确实感觉到时代变了，AI距离实用越来越近了。就拿 new bing 来说，我现在遇到一些问题就想先问问它，很大概率它能帮我解决。再看copilot，我只试用了几天就离不开它的便利性了，而且随着你熟悉了用法，会觉得它越用越好用，确实提升了工作效率。&lt;/p>
&lt;p>当然啦，这两个工具也不是万能神器，还有很多地方需要我们自己动脑子和创新。我觉得AI不是要抢我们的饭碗，而是要做我们的小帮手。我们应该好好利用AI的优势来提高我们的生活和工作质量，并且对AI保持理性和负责。&lt;/p></description></item><item><title>体验new bing：一个全新的搜索引擎</title><link>https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/</link><pubDate>Mon, 27 Feb 2023 15:36:13 +0800</pubDate><guid>https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/</guid><description>&lt;img src="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/newbing_logo.png" alt="Featured image of post 体验new bing：一个全新的搜索引擎" />&lt;p>最近体验了一下集成了 ChatGPT 的最新版本 bing 搜索，我要求它用 markdown 语法写一篇关于体验 new bing 的博客，这就是本文的来源，对原始版本修改不多，只是添加了一部分评论。&lt;/p>
&lt;p>&lt;img src="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-10-16.png"
width="1136"
height="1002"
srcset="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-10-16_hua4f265bb5c9087ce0fdb42c05dd6b993_63371_480x0_resize_box_3.png 480w, https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-10-16_hua4f265bb5c9087ce0fdb42c05dd6b993_63371_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="new bing chat topic"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="272px"
>&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近，微软发布了一个全新的搜索引擎——new bing，它采用了ChatGPT和AI技术，能够提供更智能、更人性化、更全面的搜索结果。我作为一个热爱尝试新事物的网友，当然不会错过这个机会，所以我申请了new bing的限量预览，并在这里分享一下我的体验感受。&lt;/p>
&lt;h2 id="申请过程">申请过程&lt;/h2>
&lt;p>要想使用new bing，首先需要申请它的限量预览。申请过程其实很简单，只需要按照以下步骤操作：&lt;/p>
&lt;ol>
&lt;li>访问 &lt;a class="link" href="https://www.bing.com/new" target="_blank" rel="noopener"
>https://www.bing.com/new&lt;/a>，点击其中的 &lt;code>Sign up for new Bing&lt;/code> 链接。&lt;/li>
&lt;li>在弹出的页面中，输入你的微软账号和密码，并同意相关条款。&lt;/li>
&lt;li>等待几分钟后，你就会收到一封邮件，告诉你已经成功申请到了new bing的预览资格，并给出了一个专属链接。&lt;/li>
&lt;li>点击邮件中的链接，就可以进入到new bing的主页，并开始使用它。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>博主注:&lt;/p>
&lt;ol>
&lt;li>国内要想免代理申请和使用 new bing，需要重定向到国际版 bing，请自行参考网上教程，比如 &lt;a class="link" href="https://www.yitoujing.com/article/21" target="_blank" rel="noopener"
>这篇文章&lt;/a>&lt;/li>
&lt;li>有可能频繁跳出REF页面导致用不了聊天功能，在 &lt;code>bing.com&lt;/code> 页面清除 &lt;code>bing.com&lt;/code> 的cookies重新登录即可，参考 &lt;a class="link" href="https://blog.csdn.net/AI_Fanatic/article/details/129053010" target="_blank" rel="noopener"
>原文章&lt;/a>&lt;/li>
&lt;li>博主提交申请，加入 waiting list 之后等了2周时间才审核通过，具体时间与什么因素相关暂不可知&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="使用方式">使用方式&lt;/h2>
&lt;p>使用new bing非常简单和直观。它有一个类似于传统搜索引擎的界面，你可以在搜索框中输入任何你想要查询或聊天的内容，并按回车键或点击放大镜图标进行搜索。&lt;/p>
&lt;p>&lt;img src="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-41-50.png"
width="389"
height="244"
srcset="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-41-50_hu3fa3fdea7e3f96ca250219d97dbf9efc_26843_480x0_resize_box_3.png 480w, https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-41-50_hu3fa3fdea7e3f96ca250219d97dbf9efc_26843_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="new bing interface"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>与普通搜索引擎不同的是，new bing不仅会给出一系列相关链接，还会给出一个完整、详细、可信赖、有来源注明的答案。答案可能是文字、图片、表格、代码等多种形式。而且，你可以用自然语言提问或聊天，无需拘泥于特定格式或关键词。&lt;/p>
&lt;p>&lt;img src="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-44-38.png"
width="1361"
height="1017"
srcset="https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-44-38_huc18365f95d9ed4a2b5981e31e174c7bb_53702_480x0_resize_box_3.png 480w, https://i-square.github.io/p/Experience-new-bing-a-brand-new-search-engine/screenshots/2023-02-27-16-44-38_huc18365f95d9ed4a2b5981e31e174c7bb_53702_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="new bing answer"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>除此之外，new bing还有一些其他特色功能：&lt;/p>
&lt;ul>
&lt;li>你可以通过语音输入或输出与它交流。&lt;/li>
&lt;li>你可以通过扫描二维码或拍摄图片进行图像搜索。&lt;/li>
&lt;li>你可以通过点击右上角菜单按钮切换语言或主题。&lt;/li>
&lt;li>你可以通过点击左下角聊天按钮与它进行更深入地对话。&lt;/li>
&lt;/ul>
&lt;h2 id="体验感受">体验感受&lt;/h2>
&lt;p>在使用了几天后，我对new bing非常满意和惊喜。它不仅能够满足我的各种信息需求，还能够陪我打发无聊时光。以下是我对它的一些评价：&lt;/p>
&lt;ul>
&lt;li>new bing非常智能和灵活。它能够理解我的意图和情感，并给出合适和有趣的回应。它也能够处理复杂和模糊的问题，并从多个来源整合信息并生成答案。&lt;/li>
&lt;li>new bing非常人性化和友好。它有着幽默感和创造力，并能够与我进行轻松愉快的聊天。它也能够根据我的喜好和兴趣，给出一些有用和有趣的建议。&lt;/li>
&lt;li>new bing非常全面和高效。它能够覆盖各个领域和主题，并给出最新、最准确、最权威的信息。它也能够节省我的时间和精力，让我一次性得到完整的答案，而不需要浏览多个网页。&lt;/li>
&lt;/ul>
&lt;p>总之，new bing是一个值得尝试的搜索引擎，它不仅是一个工具，还是一个伙伴。我相信随着技术的进步和用户的反馈，new bing会变得更加强大和完善。如果你也想体验new bing，请赶快申请限量预览吧！&lt;/p>
&lt;blockquote>
&lt;p>博主注:&lt;br>
new bing 自吹起来还是挺厉害的，哈哈&lt;/p>
&lt;/blockquote>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>截止发文前，微软给 new bing 做了单次5/每日50轮对话的限制，看得出来微软确实是想让 ChatGPT 服务于真正的搜索需求，降低无用的资源消耗。&lt;/p>
&lt;p>希望国内的类 ChatGPT 产品也尽早面世，在各行各业发光发热。:P&lt;/p></description></item><item><title>博客迁移-从hexo到hugo</title><link>https://i-square.github.io/p/Blog-migration-from-hexo-to-hugo/</link><pubDate>Thu, 09 Feb 2023 18:25:40 +0800</pubDate><guid>https://i-square.github.io/p/Blog-migration-from-hexo-to-hugo/</guid><description>&lt;img src="https://i-square.github.io/p/Blog-migration-from-hexo-to-hugo/hexo2hugo.png" alt="Featured image of post 博客迁移-从hexo到hugo" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>几年前还在读研的时候，有空折腾了一下 &lt;code>hexo&lt;/code> ，在 &lt;code>github pages&lt;/code> 上搭建了一个静态博客，刚开始还写了一些文章，后来新鲜劲过了就荒废了，最近看到好多人用 &lt;code>hugo&lt;/code> ，又想拾起来写写博客，遂折腾之。&lt;/p>
&lt;h2 id="动机">动机&lt;/h2>
&lt;p>想替换掉 &lt;code>hexo&lt;/code> 的原因主要有二：&lt;/p>
&lt;ol>
&lt;li>我不是前端开发者，折腾 &lt;code>hexo&lt;/code> 的环境比较费劲，当初搭建的时候就遇到各种坑，更换一台电脑之后想重新再搭建一套又得耗费不少精力；而 &lt;code>hugo&lt;/code> 发布的是二进制程序，更换机器后直接下载二进制安装即可，省时省力。&lt;/li>
&lt;li>性能方面， &lt;code>hexo&lt;/code> 随着文章数量增加，生成的时间会越来越多；而 &lt;code>hugo&lt;/code> 基本不存在主要的问题，能够做到实时预览。&lt;/li>
&lt;/ol>
&lt;h2 id="过程">过程&lt;/h2>
&lt;p>得益于我之前部署过 &lt;code>hexo + github pages&lt;/code> 的方案，整个迁移的过程还是比较顺利的，主要参考了&lt;a class="link" href="https://www.pseudoyu.com/zh/" target="_blank" rel="noopener"
>pseudoyu&lt;/a> 大佬的这篇文章： &lt;a class="link" href="https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/" target="_blank" rel="noopener"
>Hugo + GitHub Action，搭建你的博客自动发布系统&lt;/a>&lt;/p>
&lt;h3 id="主题">主题&lt;/h3>
&lt;p>首先要做的便是选择一个称心的主题了，官方主题都在这： &lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>Hugo Themes&lt;/a>&lt;/p>
&lt;p>我的选择方式是随心，第一眼看中哪个就用哪个，一眼望去 &lt;a class="link" href="https://themes.gohugo.io/themes/hugo-theme-stack/" target="_blank" rel="noopener"
>hugo-theme-stack&lt;/a> 主题跟我之前用的 &lt;code>hexo&lt;/code> 主题比较像，符合我的眼缘，嗯，就是它了！&lt;/p>
&lt;h4 id="侧栏自定义">侧栏自定义&lt;/h4>
&lt;p>我之前的 &lt;code>hexo&lt;/code> 博客侧栏放了两部分内容&lt;/p>
&lt;ul>
&lt;li>一部分是博客的功能按钮，比如 &lt;code>主页&lt;/code> &amp;amp; &lt;code>归档&lt;/code> 等，点击后跳转到博客内链&lt;/li>
&lt;li>二部分是外链按钮，比如 &lt;code>Github&lt;/code> &amp;amp; &lt;code>Love Story&lt;/code> ，点击后打开新标签页，跳转到对应链接&lt;/li>
&lt;/ul>
&lt;p>第一部分的自定义，需要在 &lt;code>content/page/&lt;/code> 下建立对应的文件夹，放入 &lt;code>index.md&lt;/code> ，写好 &lt;code>front matter&lt;/code> 即可，几个关键点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">comments&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 是否开启评论&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">menu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">weight&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">40&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 权重，越小位置越靠上&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">icon&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># svg图，可以放在 assets/icons/ 下&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而第二部分的自定义，则是直接修改 &lt;code>config.yaml&lt;/code> 文件，在 &lt;code>menu&lt;/code> -&amp;gt; &lt;code>main&lt;/code> 下直接添加需要的 &lt;code>url&lt;/code> ，比如我的侧栏 &lt;code>Love Story&lt;/code> 按钮配置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">menu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">identifier&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">love&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Love Story&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/love&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 这里也可以是完整的外链&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">icon&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">heart&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">newtab&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 是否新标签页打开&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="图片的运用">图片的运用&lt;/h4>
&lt;p>我用的主题针对图片的显示有一些 feature，比如题图、分类图等，使用好了自然更加美观。&lt;/p>
&lt;p>比如文章题图，在首页显示时，会占据卡片式的上半部分；再比如分类图，在点击侧栏的 &lt;code>归档&lt;/code> 和 &lt;code>分类&lt;/code> 按钮时，可以看到效果。&lt;/p>
&lt;p>&lt;em>顺带一提，我建议尽量使用矢量图，既能适配多分辨率，又能节省空间&lt;/em>&lt;/p>
&lt;h3 id="文章迁移">文章迁移&lt;/h3>
&lt;p>虽然之前的博客没有多少文章，但也是自己的回忆和记录，当然是要全数保留下来的。&lt;/p>
&lt;p>因为都是 &lt;code>markdown&lt;/code> 方式的文章，内容方面并没有什么障碍，迁移中的问题主要集中在文章永久链接的转换和文章存放上面。&lt;/p>
&lt;p>好在 &lt;code>hugo&lt;/code> 解决这两个问题比较方便，分别做下介绍。&lt;/p>
&lt;h4 id="永久链接">永久链接&lt;/h4>
&lt;p>之前的博客没有考虑太多，直接使用了 &lt;code>md&lt;/code> 文件的文件名作为永久链接，这样会有两个问题&lt;/p>
&lt;ol>
&lt;li>中文文件名会造成中文链接，实际解析时会被转换为一堆字符，不美观，也不便于传播记忆&lt;/li>
&lt;li>目录结构、文件名一旦有变化，链接就会变化，其他人访问原链接就是 &lt;code>404&lt;/code> 了&lt;/li>
&lt;/ol>
&lt;p>而在 &lt;code>hugo&lt;/code> 中，可以设置每篇文章的 &lt;code>slug&lt;/code> 作为永久链接，这样只需要文章的 &lt;code>slug&lt;/code> 全英文，并且保持唯一即可。&lt;/p>
&lt;h4 id="目录结构">目录结构&lt;/h4>
&lt;p>相应地， &lt;code>hugo&lt;/code> 中其实不存在目录结构的问题，不管在任意文件夹放置 &lt;code>md&lt;/code> 文件，随意命名都可以，只要保证 &lt;code>slug&lt;/code> 唯一就行了，这样大大方便了文章的组织问题。&lt;/p>
&lt;p>在文章数量少的时期可以按年存放文章，文章数量多起来可以按月、按日，随心所欲。&lt;/p>
&lt;h3 id="自动化部署">自动化部署&lt;/h3>
&lt;p>这部分直接参考其他教程文章，利用 &lt;code>github action&lt;/code> 实现自动化的发布网页到自己的 &lt;code>xxx/xxx.github.io&lt;/code> 仓库里，我抄的是 &lt;a class="link" href="https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/" target="_blank" rel="noopener"
>Hugo + GitHub Action，搭建你的博客自动发布系统&lt;/a> 里的配置。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>这一圈折腾下来，感觉不坚持写一段时间都对不起自己的折腾之心，哈哈，且行且看。&lt;/p></description></item><item><title>升级MacOS12.x(Monterey)后sudo失效问题及解决方式</title><link>https://i-square.github.io/p/Problem-and-solution-of-sudo-unavailability-after-upgrading-to-MacOS12.xMonterey/</link><pubDate>Mon, 17 Oct 2022 20:43:45 +0800</pubDate><guid>https://i-square.github.io/p/Problem-and-solution-of-sudo-unavailability-after-upgrading-to-MacOS12.xMonterey/</guid><description>&lt;img src="https://i-square.github.io/p/Problem-and-solution-of-sudo-unavailability-after-upgrading-to-MacOS12.xMonterey/macOS-Monterey-on-MBP-Feature.webp" alt="Featured image of post 升级MacOS12.x(Monterey)后sudo失效问题及解决方式" />&lt;h2 id="问题">问题&lt;/h2>
&lt;p>升级到 MacOS Monterey 以后会强行恢复 sudoers 文件到默认状态，即使用户在 admin 组里也无法使用 sudo&lt;/p>
&lt;p>当然，此时也是无法修改 sudoers 文件的&lt;/p>
&lt;h2 id="过程">过程&lt;/h2>
&lt;p>在谷歌搜索了一下，果然已经有人遇到了类似问题，在解决过程中参考了外网的3篇帖子&lt;/p>
&lt;h3 id="尝试">尝试&lt;/h3>
&lt;p>首先找到了这篇帖子： &lt;a class="link" href="https://www.reddit.com/r/MacOS/comments/rd0w69/upgraded_to_monterey_1201_now_user_not_in_sudoers/" target="_blank" rel="noopener"
>r/MacOS&lt;/a>，虽然没有解决问题，但从中学到了从Finder里直接拷贝系统文件的方法，需要权限时会弹框确认（指纹or密码）&lt;/p>
&lt;ol>
&lt;li>&lt;code>SHIFT + CMD + .&lt;/code> 显示隐藏文件&lt;/li>
&lt;li>拷贝 &lt;code>/etc/sudoers&lt;/code> 文件到可编辑目录&lt;/li>
&lt;li>修改文件，加入我的用户（比如user）和免密设置，如下&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># User specification&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="nv">ALL&lt;/span>&lt;span class="o">=(&lt;/span>ALL:ALL&lt;span class="o">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">user &lt;span class="nv">ALL&lt;/span>&lt;span class="o">=(&lt;/span>ALL:ALL&lt;span class="o">)&lt;/span> NOPASSWD:ALL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">##&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>再从 Finder 里直接拷贝修改后的问题替换原文件&lt;/li>
&lt;li>此时执行 sudo 命令仍然会报错 &lt;code>sudo: /etc/sudoers is owned by uid xxx, should be 0&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="解决uid问题">解决uid问题&lt;/h3>
&lt;p>之后又在 &lt;a class="link" href="https://apple.stackexchange.com/questions/157772/sudo-etc-sudoers-is-owned-by-uid-501-should-be-0" target="_blank" rel="noopener"
>StackExchange&lt;/a> 里学到了两种方式解决这个问题：&lt;/p>
&lt;ol>
&lt;li>开机按 &lt;code>CMD + S&lt;/code> 进入 recovery 模式，以root权限执行如下命令后，即可解决&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mount -uw /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chown root:wheel /etc/sudoers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">440&lt;/span> /etc/sudoers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>利用 Apple Script 修改文件权限，弹框确认权限（指纹or密码）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">osascript -e &lt;span class="s1">&amp;#39;do shell script &amp;#34;chown root:wheel /etc/sudoers; chmod 440 /etc/sudoers; chmod -N /etc/sudoers&amp;#34; with administrator privileges&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="后记">后记&lt;/h2>
&lt;p>事实上，完全可以直接用Apple Script修改 &lt;code>/etc/sudoers&lt;/code> 文件，比如 &lt;a class="link" href="https://dev.to/rezende79/user-is-not-in-the-sudoers-file-after-monterey-upgrade-3e4p" target="_blank" rel="noopener"
>这篇文章&lt;/a> 里提到的方式&lt;/p>
&lt;p>创建一个 &lt;code>/tmp/sudoers&lt;/code> 文件，按需修改，然后直接替换 &lt;code>/etc/sudoers&lt;/code> 文件即可，如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">osascript -e &lt;span class="s1">&amp;#39;do shell script &amp;#34;cat /tmp/sudoers &amp;gt; /etc/sudoers; chown root:wheel /etc/sudoers&amp;#34; with administrator privileges&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>高效冲浪指北</title><link>https://i-square.github.io/p/Guide-to-Efficient-Surfing/</link><pubDate>Thu, 25 Aug 2022 17:55:27 +0800</pubDate><guid>https://i-square.github.io/p/Guide-to-Efficient-Surfing/</guid><description>&lt;img src="https://i-square.github.io/p/Guide-to-Efficient-Surfing/wave-riding.svg" alt="Featured image of post 高效冲浪指北" />&lt;h2 id="引言">引言&lt;/h2>
&lt;h3 id="分享内容">分享内容&lt;/h3>
&lt;ul>
&lt;li>工具推荐&lt;/li>
&lt;li>方法分享&lt;/li>
&lt;li>开拓思路&lt;/li>
&lt;/ul>
&lt;h3 id="如何高效">如何高效？&lt;/h3>
&lt;ul>
&lt;li>聚焦：摒除杂质&lt;/li>
&lt;li>有序：有条不紊&lt;/li>
&lt;li>简化：化繁为简&lt;/li>
&lt;/ul>
&lt;h2 id="浏览器">浏览器&lt;/h2>
&lt;h3 id="发展史">发展史&lt;/h3>
&lt;h4 id="内核">内核&lt;/h4>
&lt;ul>
&lt;li>Trident（IE） -&amp;gt; EdgeHTML（早期edge）&lt;/li>
&lt;li>KHTML -&amp;gt; WebKit （早期Safari）&lt;/li>
&lt;li>↘ Chromium（早期chrome）-&amp;gt; Blink（后期chrome等）&lt;/li>
&lt;li>↘ WebKit2（后期Safari）&lt;/li>
&lt;li>Gecko（早期firefox） -&amp;gt; Servo&lt;/li>
&lt;li>Presto（早期opera）&lt;/li>
&lt;/ul>
&lt;h4 id="浏览器大战">浏览器大战&lt;/h4>
&lt;ul>
&lt;li>第一次大战：垄断之战
&lt;ul>
&lt;li>Netscape Navigator&lt;/li>
&lt;li>Internet Explorer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第二次大战：标准之战
&lt;ul>
&lt;li>IE&lt;/li>
&lt;li>Opera&lt;/li>
&lt;li>Firefox&lt;/li>
&lt;li>Safari&lt;/li>
&lt;li>Chrome&lt;/li>
&lt;li>Maxthon&lt;/li>
&lt;li>Edge&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="扩展">扩展&lt;/h3>
&lt;h3 id="广告过滤">广告过滤&lt;/h3>
&lt;ul>
&lt;li>Adblock Plus/AdBlock&lt;/li>
&lt;li>uBlock Origin&lt;/li>
&lt;/ul>
&lt;h3 id="脚本管理">脚本管理&lt;/h3>
&lt;ul>
&lt;li>Greasemonkey&lt;/li>
&lt;li>Violentmonkey&lt;/li>
&lt;li>Tampermonkey&lt;/li>
&lt;/ul>
&lt;h3 id="网络代理">网络代理&lt;/h3>
&lt;ul>
&lt;li>AutoProxy&lt;/li>
&lt;li>SwitchyOmega&lt;/li>
&lt;/ul>
&lt;h3 id="键盘导航">键盘导航&lt;/h3>
&lt;ul>
&lt;li>Vimium&lt;/li>
&lt;li>Surfingkeys&lt;/li>
&lt;/ul>
&lt;h2 id="实用工具">实用工具&lt;/h2>
&lt;h3 id="全局广告过滤">全局广告过滤&lt;/h3>
&lt;h4 id="路由器openwrt">路由器(OpenWrt)&lt;/h4>
&lt;ul>
&lt;li>Adbyby&lt;/li>
&lt;li>KoolProxy&lt;/li>
&lt;/ul>
&lt;h4 id="桌面端">桌面端&lt;/h4>
&lt;ul>
&lt;li>hosts&lt;/li>
&lt;li>AdGuard&lt;/li>
&lt;/ul>
&lt;h3 id="全局代理管理">全局代理管理&lt;/h3>
&lt;ul>
&lt;li>系统代理&lt;/li>
&lt;li>Proxifier&lt;/li>
&lt;/ul>
&lt;h3 id="全局手势">全局手势&lt;/h3>
&lt;h4 id="鼠标手势">鼠标手势&lt;/h4>
&lt;ul>
&lt;li>Win：WGestures/StrokesPlus&lt;/li>
&lt;li>Ubuntu：EasyStroke&lt;/li>
&lt;/ul>
&lt;h4 id="触摸板手势">触摸板手势&lt;/h4>
&lt;ul>
&lt;li>Win：GestureSign&lt;/li>
&lt;li>Mac：Jitouch&lt;/li>
&lt;/ul>
&lt;h3 id="多任务管理">多任务管理&lt;/h3>
&lt;ul>
&lt;li>单机：多桌面+单桌面任务聚焦&lt;/li>
&lt;li>多机
&lt;ul>
&lt;li>原则：扬长避短&lt;/li>
&lt;li>VSCode Remote、虚拟机、远程桌面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="终端">终端&lt;/h2>
&lt;h4 id="模拟器">模拟器&lt;/h4>
&lt;ul>
&lt;li>Win：XShell/SecureCRT&lt;/li>
&lt;li>Mac：iTerm2
&lt;ul>
&lt;li>会话管理&lt;/li>
&lt;li>脚本管理&lt;/li>
&lt;li>分屏（显示共用，多终端）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="zsh">zsh&lt;/h4>
&lt;ul>
&lt;li>配置：oh my zsh&lt;/li>
&lt;li>主题：powerlevel10k&lt;/li>
&lt;/ul>
&lt;h4 id="tmux">tmux&lt;/h4>
&lt;ul>
&lt;li>终端复用&lt;/li>
&lt;li>Tmux Plugin Manager
&lt;ul>
&lt;li>会话恢复：tmux-resurrect&lt;/li>
&lt;li>会话保存：tmux-continuum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="docker">docker&lt;/h4>
&lt;ul>
&lt;li>环境隔离&lt;/li>
&lt;li>轻量化&lt;/li>
&lt;li>微服务&lt;/li>
&lt;li>k8s&lt;/li>
&lt;/ul>
&lt;h4 id="shell脚本">shell脚本&lt;/h4>
&lt;ul>
&lt;li>grep&lt;/li>
&lt;li>awk&lt;/li>
&lt;li>sed&lt;/li>
&lt;/ul></description></item><item><title>使用expect脚本一键登录跳板机</title><link>https://i-square.github.io/p/login-to-the-springboard-machine-easily-by-expect-script/</link><pubDate>Fri, 18 Mar 2022 17:34:07 +0800</pubDate><guid>https://i-square.github.io/p/login-to-the-springboard-machine-easily-by-expect-script/</guid><description>&lt;img src="https://i-square.github.io/p/login-to-the-springboard-machine-easily-by-expect-script/login.svg" alt="Featured image of post 使用expect脚本一键登录跳板机" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>为了安全，多数公司会采用跳板机的方式访问内网服务器，登录需要输入AD密码和谷歌验证码，非常繁琐，这里提供一个基于expect脚本的方法，实现一键登录跳板机&lt;/p>
&lt;blockquote>
&lt;p>注：笔者在 MacOS 和 Ubuntu20.04 环境下测试ok，其他环境大同小异，按需修改即可。&lt;/p>
&lt;/blockquote>
&lt;h2 id="方法">方法&lt;/h2>
&lt;p>此方式思路是利用expect脚本交互式输入预设的AD密码，输入实时获取的谷歌验证码（使用 python authenticator 工具）&lt;/p>
&lt;h3 id="所需依赖">所需依赖&lt;/h3>
&lt;p>安装以下工具，各平台安装方法请自行搜索：&lt;/p>
&lt;ul>
&lt;li>expect&lt;/li>
&lt;li>python&lt;/li>
&lt;li>pip&lt;/li>
&lt;li>authenticator&lt;/li>
&lt;/ul>
&lt;h2 id="authenticator配置">authenticator配置&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>&lt;code>pip install authenticator&lt;/code> 若不成功，请先升级pip到最新版本&lt;/p>
&lt;h3 id="配置">配置&lt;/h3>
&lt;ol>
&lt;li>执行 &lt;code>authenticator add $user&lt;/code>（AD账号无邮箱后缀）&lt;/li>
&lt;li>提示 &lt;code>Enter passphrase&lt;/code> 这里输入2次AD密码&lt;/li>
&lt;li>提示 &lt;code>Enter shared secret&lt;/code> 需要把谷歌验证码的字符串输入到这里&lt;/li>
&lt;li>到这里就配置ok了，执行 &lt;code>authenticator generate&lt;/code> ，输入AD密码，看到谷歌验证码正常输出就是成功了&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>配置完成之后就可以使用expect脚本来自动登录了&lt;/p>
&lt;/blockquote>
&lt;h3 id="注意点">注意点&lt;/h3>
&lt;p>多数公司的AD密码可能需要每隔一段时间更新一次，在更新AD密码后，使用 &lt;code>authenticator&lt;/code> 仍然需要输入旧密码，所以下述脚本内相应的做了一下兼容&lt;/p>
&lt;h2 id="expect脚本">expect脚本&lt;/h2>
&lt;h3 id="脚本">脚本&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/bin/expect
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> timeout &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> USERNAME xxx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> PASSWORD_GEN xxxx &lt;span class="c1"># 首次配置 authenticator 时使用的密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> PASSWORD xxxxxxxx &lt;span class="c1"># AD密码，每隔 xx 天更新一次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> JUMP_ZONE zone &lt;span class="c1"># 假如跳板机区分区域&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> LINK_TYPE ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> DOMAIN example.com &lt;span class="c1"># 登录域名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 判断是否是 vscode 云端环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="nv">$JUMP_ZONE&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> main_response &lt;span class="s2">&amp;#34;Opt&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> main_response &lt;span class="s2">&amp;#34;Ip:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawn authenticator generate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">expect &lt;span class="s2">&amp;#34;passphrase:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">send &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PASSWORD_GEN&lt;/span>&lt;span class="s2">\r&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">expect &lt;span class="s2">&amp;#34;seconds&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> found &lt;span class="o">[&lt;/span>regexp &lt;span class="o">{([&lt;/span>0-9&lt;span class="o">]{&lt;/span>6&lt;span class="o">})}&lt;/span> &lt;span class="nv">$expect_out&lt;/span>&lt;span class="o">(&lt;/span>buffer&lt;span class="o">)&lt;/span> match verify_code&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="nv">$found&lt;/span> &lt;span class="o">==&lt;/span> 1&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> send &lt;span class="se">\x&lt;/span>&lt;span class="m">03&lt;/span> &lt;span class="c1"># 发送 Ctrl-C 结束 authenticator 进程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> puts &lt;span class="s2">&amp;#34;invalid verification code&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawn &lt;span class="si">${&lt;/span>&lt;span class="nv">LINK_TYPE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">USERNAME&lt;/span>&lt;span class="si">}&lt;/span>@jump-&lt;span class="si">${&lt;/span>&lt;span class="nv">JUMP_ZONE&lt;/span>&lt;span class="si">}&lt;/span>.&lt;span class="si">${&lt;/span>&lt;span class="nv">DOMAIN&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">expect &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;yes/no&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span> send &lt;span class="s2">&amp;#34;yes\r&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> exp_continue &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;Verification code:&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span> send &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$verify_code&lt;/span>&lt;span class="s2">\r&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> exp_continue &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;assword:&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span> send &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PASSWORD&lt;/span>&lt;span class="s2">\r&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> exp_continue &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;MFA auth&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span> send &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$verify_code&lt;/span>&lt;span class="s2">\r&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> exp_continue &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$main_response&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">interact
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;ol>
&lt;li>把脚本开头的几个变量设置一下，或者自己修改为从argv里读取
&lt;ul>
&lt;li>&lt;code>USERNAME&lt;/code> AD账户不带邮箱后缀&lt;/li>
&lt;li>&lt;code>PASSWORD&lt;/code> AD密码&lt;/li>
&lt;li>&lt;code>JUMP_ZONE&lt;/code> 是跳板机的区域代码，按需&lt;/li>
&lt;li>&lt;code>LINK_TYPE&lt;/code> 是连接协议，比如 &lt;code>ssh | sftp&lt;/code>，按需&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>假设保存文件为 &lt;code>~/jump_ssh.exp&lt;/code>&lt;/li>
&lt;li>执行脚本即可自动化登录到跳板机 &lt;code>expect ~/jump_ssh.exp&lt;/code>
&lt;ol>
&lt;li>也可以给脚本加上可执行权限 &lt;code>chmod a+x ~/jump_ssh.exp&lt;/code>&lt;/li>
&lt;li>然后直接执行即可 &lt;code>~/jump_ssh.exp&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>OneDriveSetup.exe占用大量CPU的解决办法</title><link>https://i-square.github.io/p/Solution-to-the-problem-that-OneDriveSetup.exe-eat-CPU/</link><pubDate>Mon, 03 Jul 2017 22:27:29 +0000</pubDate><guid>https://i-square.github.io/p/Solution-to-the-problem-that-OneDriveSetup.exe-eat-CPU/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>从前两周开始我的实验室电脑出现了CPU占用率一直保持在25%以上的现象，经过排查发现问题出在&lt;code>OneDriveSetup.exe&lt;/code>这个进程上，然而当时我上谷歌各种搜索也没有找到解决办法，后来也就没管，但是今天无意中正好看到解决办法，在这里分享出来，希望遇到这个问题的能够尽早解决。&lt;/p>
&lt;!-- more -->
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>解决办法最早是在德国微软论坛里发布的，发布时间是2017年6月26日，这里是&lt;a class="link" href="https://answers.microsoft.com/de-de/windows/forum/windows_10-performance/onedrivesetupexe-32bit-lastet-cpu-dauerhaft-mit-ca/ae516fe5-7b88-4e87-bf37-fbc94d1a7664" target="_blank" rel="noopener"
>原帖地址&lt;/a>&lt;/p>
&lt;p>以下是操作步骤：&lt;/p>
&lt;ol>
&lt;li>在任务管理器里面结束进程&lt;code>OneDriveSetup.exe&lt;/code>&lt;/li>
&lt;li>进入&lt;code>C:\Users\your username\AppData\Local\Microsoft\OneDrive\setup\logs&lt;/code>文件夹，删除以下2个文件(如果看不到这两个文件，需要先设置显示隐藏文件和显示系统文件)
&lt;ul>
&lt;li>&lt;code>UserTelemetryCache.otc&lt;/code>&lt;/li>
&lt;li>&lt;code>UserTelemetryCache.otc.session&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除后进入&lt;code>C:\Users\your username\AppData\Local\Microsoft\OneDrive\Update&lt;/code>文件夹运行里面的&lt;code>OneDriveSetup.exe&lt;/code>安装更新即可&lt;/li>
&lt;/ol>
&lt;p>这个时候&lt;code>OneDriveSetup.exe&lt;/code>不会在占用大量CPU，也不会一直在后台跑了，enjoy&lt;/p></description></item><item><title>MFC+BCG库静态链接方法总结</title><link>https://i-square.github.io/p/Summary-of-MFC-BCG-library-static-link-method/</link><pubDate>Mon, 19 Jun 2017 22:24:59 +0000</pubDate><guid>https://i-square.github.io/p/Summary-of-MFC-BCG-library-static-link-method/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在做一个MFC项目，使用了有名的BCG界面库，我的编程平台是 &lt;code>Win10 + VS2015&lt;/code> , 在我自己的机器上测试的时候一直都是使用动态链接的方式，没有什么问题，但是当切换到 &lt;code>Windows Server 2008 R2&lt;/code> 系统下，会出现缺少 &lt;code>xxx.dll&lt;/code> 的错误，按照往常的做法，缺少的文件也就是VC的运行库，然而我安装VS2015的运行库却失败了，网上一查才发现VS2015的运行时库不支持 &lt;code>Windows Server 2008 R2&lt;/code> ，最低得是 &lt;code>Windows Server 2008 R2 with SP1&lt;/code> ，安装运行库的法子走不通，只能换一条路了。&lt;/p>
&lt;!-- more -->
&lt;h2 id="静态链接">静态链接&lt;/h2>
&lt;p>MFC程序可以用动态链接或者静态链接的方式使用MFC的库，动态链接的好处是最后生成的exe文件非常小，缺点是目标机器必须安装对应的运行库，或者要在文件夹里手动放入所需的dll；静态链接的好处是直接把VC的运行库链接到最终的exe里，不必安装运行库或者添加一堆dll就可以直接运行，缺点是生成的exe会比较大。&lt;/p>
&lt;p>静态链接多占用的那一点空间对我来说没什么影响，所以我打算采取静态链接的方法解决上面提到的问题，MFC的库好办，只需要改项目属性就可以了，而静态链接BCG库则多一点波折，关于如何静态链接BCG库网上也有很多方法，但是并不全面，经过一番查找，我自己总结了在MFC里静态链接BCG库的方法，内容主要参考自&lt;a class="link" href="https://support.bcgsoft.com/KB/Category/19-technical-questions" target="_blank" rel="noopener"
>BCG技术问答&lt;/a>里的&lt;a class="link" href="https://support.bcgsoft.com/KB/View/37-how-can-i-add-a-library-to-my-static-mfc-project" target="_blank" rel="noopener"
>这个问题&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;h3 id="准备">准备&lt;/h3>
&lt;ol>
&lt;li>编译所需版本的静态库lib文件（这一步在安装BCG库的时候一般做过了，直接拷贝出来就行，如 &lt;code>BCGCBPRO2510STATICU140.lib&lt;/code> ）&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>修改项目属性
&lt;ul>
&lt;li>&lt;code>C/C++&lt;/code> -&amp;gt; &lt;code>代码生成&lt;/code> -&amp;gt; &lt;code>运行库&lt;/code> 里选择 &lt;code>MT&lt;/code> (release)或者 &lt;code>MTd&lt;/code> (debug)&lt;/li>
&lt;li>&lt;code>常规&lt;/code> 里选择 &lt;code>在静态库中使用 MFC&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将BCGSoft\BCGControlBarPro\BCGCBPro\Styles下的
&lt;ul>
&lt;li>&lt;code>Office 2010 (blue)&lt;/code> 文件夹(以该主题为例)&lt;/li>
&lt;li>&lt;code>BCGPStyle2010Blue.rc&lt;/code> 和 &lt;code>BCGPStyle2010Blue.rc2&lt;/code> 文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>拷贝到&lt;code>你的项目主目录&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="修改-stdafxcpp">修改 &lt;code>stdafx.cpp&lt;/code>&lt;/h3>
&lt;p>在 &lt;code>stdafx.cpp&lt;/code> 文件的最后（在 &lt;code>#include stdafx.h&lt;/code> 之后）添加以下代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if _MSC_VER &amp;gt; 1500
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define COMPILE_MULTIMON_STUBS
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma warning(push)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma warning(disable: 4996)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;multimon.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma warning(pop)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改资源文件属性">修改资源文件属性&lt;/h3>
&lt;p>在资源视图的对话框上点击右键，选择 &lt;code>资源包括(L)...&lt;/code>&lt;/p>
&lt;ol>
&lt;li>在 &lt;code>只读符号指令&lt;/code> 里添加 &lt;code>#include &amp;quot;bcgprores.h&amp;quot;&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>在&lt;code>编译时指令&lt;/code>里
&lt;ul>
&lt;li>移除&lt;code>_AFX_NO_SPLITTER_RESOURCES&lt;/code>&lt;/li>
&lt;li>添加&lt;code>#include &amp;quot;BCGCBPro.rc&amp;quot;&lt;/code>和&lt;code>#include &amp;quot;BCGPStyle2010Blue.rc&amp;quot;&lt;/code>&lt;/li>
&lt;li>如果你想动态链接MFC，静态链接BCG, 则添加&lt;code>&amp;quot;#define _BCGCBPRO_STATIC_&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>(这条基本不用管)如果你的项目是从MFC版本2008或更高版本移植的，请删除资源文件中对 &lt;code>afxribbon.rc&lt;/code> 的所有引用，因为它和 &lt;code>BCGCBPro.rc&lt;/code> 冲突&lt;/li>
&lt;/ul></description></item><item><title>使用C++11实现一个简易计时器类</title><link>https://i-square.github.io/p/Implement-a-simple-timer-class-using-C-11/</link><pubDate>Mon, 22 May 2017 20:59:21 +0000</pubDate><guid>https://i-square.github.io/p/Implement-a-simple-timer-class-using-C-11/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>计时器可能是大多数程序员都自己实现过的一个功能，尤其是&lt;code>C++&lt;/code>这种没有计时器类可以直接调用的，一般都会自己实现一个，而由于硬件的原因，想要一个跨平台的计时器功能还要兼顾不同的硬件平台，增加程序员的工作量。&lt;code>C++11&lt;/code>标准发布之后，新增了&lt;code>chrono&lt;/code>命名空间，里面包含了大量与时间相关的功能，利用它可以非常方便的写出一个计时器类。&lt;/p>
&lt;!-- more -->
&lt;h2 id="旧式计时器类">旧式计时器类&lt;/h2>
&lt;p>先说一下以往的方法，在 &lt;code>Windows&lt;/code> 平台上，想要实现一个高精度的计时器，一般会用到2个 &lt;code>Windows API&lt;/code> ， &lt;code>QueryPerformanceFrequency&lt;/code> 和 &lt;code>QueryPerformanceCounter&lt;/code> ，配合使用获取高精度时间间隔。而 &lt;code>linux&lt;/code> 平台则一般使用 &lt;code>gettimeofday&lt;/code> 函数，可以获取微妙精度的时间，如需更高精度，则可能要用到汇编。&lt;/p>
&lt;h3 id="接口">接口&lt;/h3>
&lt;p>它可能长这样，为了兼顾不同平台，需要预处理宏的帮忙。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if !defined(_WINSOCK2API_) &amp;amp;&amp;amp; !defined(_WINSOCKAPI_)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">timeval&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">tv_sec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">tv_usec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">timer_dt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Timer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Timer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Timer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">timer_dt&lt;/span> &lt;span class="nf">get_time&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">freq&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LARGE_INTEGER&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LARGE_INTEGER&lt;/span> &lt;span class="n">finish_time&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">timeval&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">timeval&lt;/span> &lt;span class="n">finish_time&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="实现">实现&lt;/h3>
&lt;p>核心的3个函数&lt;code>start()&lt;/code>、&lt;code>stop()&lt;/code>和&lt;code>get_time()&lt;/code>的实现可能是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 构造函数里获取高精度时钟的频率
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Timer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Timer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">LARGE_INTEGER&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QueryPerformanceFrequency&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">LARGE_INTEGER&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">freq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">QuadPart&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mf">1000.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">Timer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">QueryPerformanceCounter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">LARGE_INTEGER&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">start_time&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">gettimeofday&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">start_time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">Timer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">stop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">QueryPerformanceCounter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">LARGE_INTEGER&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">finish_time&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">gettimeofday&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">finish_time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">timer_dt&lt;/span> &lt;span class="n">Timer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get_time&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">timer_dt&lt;/span> &lt;span class="n">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">timer_dt&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">finish_time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">QuadPart&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">QuadPart&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">freq&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="c1">// time difference in milli-seconds
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">timer_dt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mf">1000.0&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">finish_time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tv_sec&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tv_sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.001&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">finish_time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tv_usec&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tv_usec&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif&lt;/span>&lt;span class="c1">//_WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">interval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="c11-计时器类">C++11 计时器类&lt;/h2>
&lt;h3 id="chrono">chrono&lt;/h3>
&lt;p>&lt;code>C++11&lt;/code> 标准发布之后，给我们带来了 &lt;code>chrono&lt;/code> 命名空间，里面的东西虽说名字特别难记:P，但是用起来很方便，用它来实现一个跨平台、高精度的计时器类只需要十几行代码，甚至核心代码只有3行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">// 这里为了方便说明直接用了该命名空间，实际情况请酌情使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Timer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Timer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="n">tpStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tpStart&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">tpStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">tpStop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">delta&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time_point&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time_point&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tpStop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>没错，只需要这些代码就可以实现一个跨平台且高精度的计时器类，使用方法也非常简单，可以按需选择精度，例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Timer&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// some code here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 调用 delta() 函数时需指定精度，以下四种均在chrono命名空间内定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// seconds, milliseconds, microseconds, nanoseconds
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;the xxx time is: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">delta&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">nanoseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 输出纳秒
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;the xxx time is: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">delta&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 输出毫秒
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了方便使用，还可以加入以下两个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">stop_delta&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">stop&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tpStop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">stop_delta_start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">ts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tpStop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ratio">ratio&lt;/h3>
&lt;p>C++11还增加了 &lt;code>ratio&lt;/code> 命名空间，顾名思义，这个命名空间里定义了一堆比率，如 &lt;code>std::milli&lt;/code> 、 &lt;code>std::micro&lt;/code> 、 &lt;code>std::nano&lt;/code> ，配合这些比率我们就可以实现一个返回浮点数的计时器了，核心代码如下，只是修改了一点点内容:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;ratio&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">// 这里为了方便说明直接用了该命名空间，实际情况请酌情使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Timer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ratio&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">ms&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ratio&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">us&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ratio&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000000&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">ns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ratio&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000000000&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Timer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="n">tpStop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tpStart&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">tpStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">tpStop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">delta&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">stop_delta&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">stop&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tpStop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">stop_delta_start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">ts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tpStop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time_point&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tpStart&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time_point&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tpStop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>C++11新增的这个 &lt;code>chrono&lt;/code> 命名空间非常方便好用，由于是标准库，在跨平台方面具有天然优势，在代码简洁程度上也比原来要好，配合模板更加可以减少代码量，当然它不止能用来做计时器用，还有很多别的方面的应用，在此就不多说了，以后可能会补充。&lt;/p></description></item><item><title>数据结构学习笔记（八）：不相交集类</title><link>https://i-square.github.io/p/Data-structure-study-notes-8-Disjoint-set-classes/</link><pubDate>Mon, 24 Apr 2017 15:42:58 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-8-Disjoint-set-classes/</guid><description>&lt;p>这一章介绍解决等价问题的一种有效数据结构。实现简单，也非常快，每种操作只需要常数平均时间。&lt;/p>
&lt;h2 id="等价关系-equivalence-relation">等价关系 (equivalence relation)&lt;/h2>
&lt;p>若对于每一对元素(a,b),a,b∈S, &lt;code>a R b&lt;/code>或者为true或者为false，则称在集合S上定义关系R。如果&lt;code>a R b&lt;/code>为true，我们说a和b有关系。&lt;/p>
&lt;p>&lt;strong>等价关系&lt;/strong>是满足下列三个性质的关系R：&lt;/p>
&lt;ol>
&lt;li>自反性：对于所有的a∈S，&lt;code>a R a&lt;/code>&lt;/li>
&lt;li>对称性：&lt;code>a R b&lt;/code>当且仅当&lt;code>b R a&lt;/code>&lt;/li>
&lt;li>传递性：若&lt;code>a R b&lt;/code>且b R c则&lt;code>a R c&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>元素a∈S的&lt;strong>等价类&lt;/strong>(equivalence class)是S的子集，它包含所有与a有（等价）关系的元素。注意，等价类形成对S的一个划分：S的每一个成员恰好出现在一个等价类中。为确定是否a~b，我们只需验证a和b是否都在同一个等价类中。&lt;/p>
&lt;p>输入数据最初是N个集合(collection)的类，每个集合含有一个元素。初始的描述是所有的关系均为false（自反的关系除外）。每个集合都有一个不同的元素，从而&lt;code>Si∩Sj=⊙&lt;/code>，称为&lt;strong>不相交&lt;/strong>(disjoint)&lt;/p>
&lt;p>基本操作有两种，称为&lt;strong>求并/查找&lt;/strong>(union/find)算法。&lt;/p>
&lt;h2 id="灵巧求并算法">灵巧求并算法&lt;/h2>
&lt;p>直观的union操作相当随意，它简单地通过使第二棵树成为第一棵树的子树而完成合并。对其进行简单改进，使得总是较小的树成为较大的树的子树，称为&lt;strong>按大小求并&lt;/strong>(union by size)，它保证树的深度最大是O(logN)。&lt;br>
连续M次操作平均需要O(M)时间。&lt;/p>
&lt;p>另一种方法是&lt;strong>按高度求并&lt;/strong>(union by height)，它同样保证树的深度最大是O(logN)。做法是使浅的树成为深的树的子树。&lt;/p>
&lt;h2 id="一个应用">一个应用&lt;/h2>
&lt;p>应用求并/查找数据结构的一个例子是迷宫的生成。初始化时所有格子都在自己的等价类中，之后不断合并，最终生成迷宫。&lt;/p></description></item><item><title>数据结构学习笔记（七）：排序</title><link>https://i-square.github.io/p/Data-structure-study-notes-7-sorting/</link><pubDate>Sun, 23 Apr 2017 22:01:12 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-7-sorting/</guid><description>&lt;p>在内存里的排序称为内部排序，而在磁盘上的排序称为外部排序。&lt;br>
假设输入数据支持&amp;quot;&amp;lt;&amp;ldquo;和&amp;rdquo;&amp;gt;&amp;ldquo;操作符，除赋值运算外，这种运算是仅有的允许对输入数据进行的操作，在此条件下的排序称为基于比较的排序。&lt;/p>
&lt;h2 id="内容">内容&lt;/h2>
&lt;p>对内部排序的考查将指出：&lt;/p>
&lt;ul>
&lt;li>存在几种直观的算法以O(N^2)排序，如冒泡、选择、插入排序&lt;/li>
&lt;li>希尔排序编程简单，以o(N^2)运行，在实践中很有效&lt;/li>
&lt;li>还有一些稍微复杂的O(NlogN)算法&lt;/li>
&lt;li>任何只使用比较的排序算法在最坏情形下和平均情形下均需要Ω(NlogN)次比较&lt;/li>
&lt;/ul>
&lt;h2 id="插入排序-insertion-sort">插入排序 (insertion sort)&lt;/h2>
&lt;p>插入排序由N-1趟（pass）排序组成，排序策略是，在第p趟，将位置p上的元素向左移动至它在前p+1个元素中的正确位置上。&lt;/p>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>O(N^2) 精确界，反序输入可达。&lt;br>
若已排序输入，则O(N)&lt;br>
平均情形Θ(N^2)&lt;/p>
&lt;h2 id="一些简单排序算法的下界">一些简单排序算法的下界&lt;/h2>
&lt;p>定理1 N个互异元素的数组的平均逆序数是N(N-1)/4&lt;br>
定理2 通过交换相邻元素进行排序的任何算法平均需要Ω(N^2)时间&lt;br>
对冒泡排序、选择排序、插入排序都有效&lt;br>
定理2告诉我们，为了以o(N^2)排序，必须执行比较，特别是要对相距较远的元素进行交换。排序通过删除逆序得以继续进行，为了有效进行，必须每次交换删除多个逆序。&lt;/p>
&lt;h2 id="希尔排序-shell-sort">希尔排序 (shell sort)&lt;/h2>
&lt;p>发明者是Donald Shell，该算法是冲破二次时间屏障的第一批算法之一，不过，直到它最初被发现的若干年后才证明了它的亚二次时间界。&lt;/p>
&lt;p>它通过比较相距一定间隔的元素来工作，各趟比较所用的距离随着算法的进行而减小，直到只比较相邻元素的最后一趟排序为止。因此，希尔排序又是也叫做&lt;strong>缩减增量排序&lt;/strong>(diminishing increment sort)&lt;/p>
&lt;h3 id="分析-1">分析&lt;/h3>
&lt;p>使用希尔增量的最坏情形Θ(N^2)&lt;br>
Hibbard增量：1，3，7，…… ，2^k - 1&lt;br>
使用Hibbard增量的最坏情形Θ(N^(3/2))&lt;br>
Sedgewick提出了几种增量序列，最坏情形时间O(N^(4/3))&lt;br>
希尔排序的性能在实践中是可以接受的，由于编程简单，适度数量的输入数据经常选用。&lt;/p>
&lt;h2 id="堆排序-heap-sort">堆排序 (heap sort)&lt;/h2>
&lt;p>如第六章所说，优先队列可以用O(NlogN)时间进行排序，基于该思想的算法称为堆排序&lt;/p>
&lt;p>由数组建立N个元素的二叉堆花费O(N)时间，每次deleteMin花费O(logN)，N次总共花费O(NlogN)&lt;br>
使用了附加数组，存储需求增加了一倍&lt;/p>
&lt;p>避免使用附加数组的方法：每次deleteMin之后把min放到刚刚空出来的位置上，N次deleteMin之后，数组将是递减顺序，因此可以构建max堆&lt;/p>
&lt;ol>
&lt;li>以O(N)建立max堆&lt;/li>
&lt;li>交换最后一个和第一个元素，堆大小减1并下滤，相当于执行deleteMax&lt;/li>
&lt;li>循环执行步骤2，N-1次&lt;/li>
&lt;/ol>
&lt;h3 id="分析-2">分析&lt;/h3>
&lt;p>在最坏情形下堆排序最多使用2NlogN-O(N)次比较&lt;br>
堆排序非常稳定：它平均使用的比较只比最坏情形界指出的略少&lt;/p>
&lt;p>定理1 对N个互异项的随机排列进行堆排序，所用的比较平均次数为2NlogN-O(NloglogN)&lt;/p>
&lt;p>可以证明，堆排序总是至少使用NlogN-O(N)次比较，而且存在达到这个界的数据。似乎平均情形也应该是2NlogN-O(N)次比较（而不是定理1中的第二项），但目前无法证明&lt;/p>
&lt;h2 id="归并排序-merge-sort">归并排序 (merge sort)&lt;/h2>
&lt;p>以最坏情形O(NlogN)时间运行，所使用的比较次数几乎是最优的，它是递归算法的一个很好的实例&lt;/p>
&lt;p>算法的基本操作是合并两个已排序的表，取两个输入A、B，一个输出C，每次将A、B中的小者放入C，相关的位置推进，这显然是线性的&lt;/p>
&lt;h3 id="算法">算法&lt;/h3>
&lt;p>基准情形：N=1时，结果是显然的&lt;br>
否则，递归地将前半部分和后半部分各自归并排序，再将两部分合并&lt;/p>
&lt;p>该算法是经典的&lt;strong>分治&lt;/strong>策略，它将问题&lt;strong>分&lt;/strong>(divide)成一些小问题然后递归求解，而&lt;strong>治&lt;/strong>(conquering)的阶段则是将分的阶段解得的各答案合并在一起&lt;/p>
&lt;h3 id="分析-3">分析&lt;/h3>
&lt;p>分析递归例程技巧的经典实例：必须给运行时间写出一个递推关系。&lt;br>
假设N是2的幂，从而总可以将它分裂成相等的两部分。对于N=1，所用时间是常数，将其记为1。则有&lt;br>
T(1) = 1&lt;br>
T(N) = 2T(N/2) + N&lt;br>
求解得 T(N) = NlogN + N = O(NlogN)&lt;/p>
&lt;p>利弊：在java中比较耗时多于移动，因此在java中归并排序是一般目的排序的最佳选择；但在C++中，比较耗时少而复制对象代价很大，因此实践中不常用&lt;/p>
&lt;h2 id="快速排序-quick-sort">快速排序 (quick sort)&lt;/h2>
&lt;p>快排是实践中最快的已知排序算法，平均运行时间是O(NlogN)，最坏情形是O(N^2)，但稍作努力就可避免。&lt;br>
通过将堆排序与快速排序结合，可以在堆排序O(NlogN)最坏运行时间下，得到几乎所有输入的最快运行时间。&lt;/p>
&lt;p>快排也是分治的递归算法，排序数组S步骤如下：&lt;/p>
&lt;ol>
&lt;li>若S中元素数是0或1，则返回&lt;/li>
&lt;li>取S中任一元素v，称之为&lt;strong>枢纽元&lt;/strong>(pivot)&lt;/li>
&lt;li>将S-{v}（S中其余元素）&lt;strong>划分&lt;/strong>成两个不相交的集合：S1={x∈S-{v}|x≤v}和S2={x∈S-{v}|x≥v}&lt;/li>
&lt;li>返回{quickSort(S1),后跟v,继而quickSort(S2)}&lt;/li>
&lt;/ol>
&lt;p>第三步中划分的标准不是唯一的，因此这就成了设计决策。一部分好的实现方法是将这种情形尽可能有效地处理。直观地看，我们希望枢纽元能将元素对半分，一半在S1，另一半在S2。&lt;/p>
&lt;h3 id="选取枢纽元">选取枢纽元&lt;/h3>
&lt;ol>
&lt;li>一种典型的错误是将第一个元素选作枢纽元。若输入随机，那么这是可以接受的，但实际情况有很多预排序的序列，这样的分割是劣质的。类似的还有选取前2个元素的大者，这是一样的，不要使用。&lt;/li>
&lt;li>一种安全的做法是随机选取枢纽元，但这取决于随机数生成器的质量，而且声称随机数的代价一般也是很昂贵的。&lt;/li>
&lt;li>三数中值分割法&lt;br>
一组N个数的中值是第上取整(N/2)个最大的数。枢纽元的最好选择是数组的中值，但算出中值代价太高。一般的做法是选取左端、右端和中心位置上的三个元素的中值作为枢纽元。显然该方法消除了预排序输入的不好情形，并且减少了约14%的比较次数。&lt;/li>
&lt;/ol>
&lt;h3 id="分割策略">分割策略&lt;/h3>
&lt;ol>
&lt;li>将枢纽元与最后的元素交换&lt;/li>
&lt;li>i从第一个元素开始，j从倒数第二个元素开始&lt;/li>
&lt;li>当i在j左边时，右移i，移过小于枢纽元的元素，j左移，移过大于枢纽元的元素，i,j都停止时交换两个元素，直到i,j交错&lt;/li>
&lt;li>将枢纽元与i所指向的元素交换&lt;/li>
&lt;/ol>
&lt;p>如何处理等于枢纽元的元素？&lt;br>
若等于，则停止移动&lt;/p>
&lt;h3 id="小数组">小数组&lt;/h3>
&lt;p>对于很小的数组（N≤20），快速排序不如插入排序，而且，因为快排是递归的，这样的情形经常发生。通常的解决办法是，对于小数组使用插入排序。一种好的截止范围(cutoff range)是N=10&lt;/p>
&lt;h3 id="分析-4">分析&lt;/h3>
&lt;p>最坏情形：O(N^2)
最佳情形：O(NlogN)
平均情形：O(NlogN)&lt;/p>
&lt;h2 id="快速选择-quick-select">快速选择 (quick select)&lt;/h2>
&lt;p>修改快速排序以解决选择问题，即找第k个最大（小）元。&lt;/p>
&lt;p>前3步和快速排序一样&lt;br>
第4步&lt;/p>
&lt;ul>
&lt;li>若k≤S1，那么k必然在S1中，返回quickSelect(S1, K)&lt;/li>
&lt;li>若k = 1 + |S1|，那么枢纽元就是第k个最小元&lt;/li>
&lt;li>否则，第k个最小元就在S2中，它是S2中的第（k-|S1|-1）个最小元，返回quickSelect(S2, k-|S1|-1)&lt;/li>
&lt;/ul>
&lt;h3 id="分析-5">分析&lt;/h3>
&lt;p>与快排相比，快速选择只进行了一次递归调用而不是两次&lt;/p>
&lt;p>最坏情形：O(N^2)，当S1和S2一个是空时
平均情形：O(N)&lt;/p></description></item><item><title>数据结构学习笔记（六）：优先队列（堆）</title><link>https://i-square.github.io/p/Data-structure-study-notes-6-priority-queue-heap/</link><pubDate>Thu, 20 Apr 2017 22:27:15 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-6-priority-queue-heap/</guid><description>&lt;p>本章讨论优先队列（priority queue），介绍优先队列在离散事件模拟中的应用&lt;br>
作者评价：这类数据结构属于计算机科学中最雅致的一种&lt;/p>
&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>优先队列ADT的高效实现&lt;/li>
&lt;li>优先队列的使用&lt;/li>
&lt;li>优先队列的高级实现&lt;/li>
&lt;/ul>
&lt;h2 id="二叉堆-binary-heap">二叉堆 (binary heap)&lt;/h2>
&lt;p>插入删除最坏O(logN)，实际上插入花费常数平均时间，若无删除干扰，该结构将以线性时间建立一个具有N项的优先队列。&lt;br>
与二叉查找树一样，堆具有两个性质，堆的操作必须满足所有性质才能终止。&lt;/p>
&lt;h3 id="结构性质">结构性质&lt;/h3>
&lt;p>堆是一棵&lt;strong>完全二叉树&lt;/strong>（三角形缺右下角），特例是满二叉树（三角形），最底层元素必须从左往右填入，如有空缺则不是完全二叉树&lt;br>
一棵高为h的完全二叉树有[2^h , 2^(h+1) - 1]个节点，这意味着完全二叉树的高是 下取整(logN)，显然它是O(logN)的&lt;br>
因为此规律，所以堆可以用数组表示而不用链表，对于数组中任一位置i上的元素，其左儿子在位置2i上，右儿子在左儿子后的(2i+1)上，它的父亲在位置 下取整(i/2) 上&lt;/p>
&lt;h3 id="堆序性质">堆序性质&lt;/h3>
&lt;p>在堆中，除根节点以外，每一个节点的值都大于（或等于）它的父节点的值&lt;br>
根据堆序性质，最小值总在根结点，因此可以以O(1)时间做findMin&lt;br>
相应地，通过改变堆序性质，也可以建立一个max堆，以O(1)时间做findMax&lt;/p>
&lt;h3 id="插入上滤策略">插入（上滤策略）&lt;/h3>
&lt;p>为了插入新元素X，在堆的下一个可用位置（为了满足结构性质）创建一个空穴，若X放入空穴仍满足堆序性质，则插入完成，否则交换空穴和其父节点，直到X被放入并满足堆序性质为止&lt;/p>
&lt;h3 id="删除下滤策略">删除（下滤策略）&lt;/h3>
&lt;p>找出最小元很容易，难的是删除它。&lt;br>
当删除一个最小元时，堆中最后一个元素X必须移动到该堆的某个地方。策略是在根节点建立一个空穴，然后将两个儿子中的较小者移入空穴，重复该步骤直到X可以被放入空穴中。代码中则是用X直接替换根结点的值，然后下滤。&lt;/p>
&lt;h3 id="注意">注意&lt;/h3>
&lt;p>在堆的实现中经常出现的错误是，当堆中存在偶数个元素时，将出现一个节点只有一个儿子的情况。因此我们必须以节点不总有两个儿子为前提，这需要额外的测试。&lt;/p>
&lt;h3 id="应用">应用&lt;/h3>
&lt;h4 id="选择问题">选择问题&lt;/h4>
&lt;p>输入N个元素及整数k，找出第k个最大的元素，极端情况是k=上取整(N/2)，此时实际上是找中位数，以下两个算法都能在找中位数的情况下以O(NlogN)时间运行&lt;/p>
&lt;ul>
&lt;li>A 将N个元素读入数组，对数组应用buildHeap，再执行k次deleteMin，最后根节点上的就是第k个最小值，构造一个最大堆就可以找到第k个最大值&lt;/li>
&lt;li>B 用buildHeap将前k个元素构造成一个最大堆，若下一个元素大于堆里的最小值，则删除最小值，插入新元素，最终的最小值就是所求的第k个最大值&lt;/li>
&lt;/ul>
&lt;h2 id="d堆">d堆&lt;/h2>
&lt;p>类似B树，深度变浅，每个节点有d个儿子&lt;/p>
&lt;h2 id="左式堆-leftist-heap">左式堆 (leftist heap)&lt;/h2>
&lt;p>左式堆也是二叉树，但它不是理想平衡的，事实上是趋于非常不平衡&lt;/p>
&lt;p>定义任一节点X的**零路径长(null path length)**npl(X)为从X到一个不具有两个儿子的节点的最短路径长&lt;br>
因此，具有0个或1个儿子的节点npl为0，而npl(NULL)=-1&lt;br>
注意，任一节点的npl比它儿子节点的npl的最小值多1&lt;/p>
&lt;h3 id="左式堆性质">左式堆性质&lt;/h3>
&lt;p>对于堆中的每一个节点X，左儿子的npl至少与右儿子的npl一样大&lt;br>
这个性质导致树向左增加深度，沿左式堆右侧的右路径是堆中最短的路径&lt;br>
定理：在右路径上有r个节点的左式堆必然至少有2^r -1个节点&lt;/p>
&lt;p>对左式堆的基本操作是合并。插入可以看成是合并一个单节点堆，删除即是删掉根结点，然后合并左右子树。&lt;/p>
&lt;h2 id="斜堆-skew-heap">斜堆 (skew heap)&lt;/h2>
&lt;p>斜堆是左式堆的自调节形式，具有堆序，但不存在结构限制。斜堆不需要存储npl，每次合并无条件交换左右儿子。&lt;/p>
&lt;h2 id="二项队列-binomial-queue">二项队列 (binomial queue)&lt;/h2>
&lt;p>以最坏O(logN)支持插入、合并、deleteMin，插入操作平均花费常数时间&lt;/p>
&lt;p>实质是由&lt;strong>二项树&lt;/strong>(binomial tree)构成的&lt;strong>森林&lt;/strong>(forest)。&lt;br>
每一个高度上最多存在一棵二项树。高度为k的二项树Bk是通过将一棵二项树B(k-1)附接到另一棵二项树B(k-1)的根上构成的。高度为k的二项树有2^k个节点，在深度d处的节点数是二项系数C(d,k)&lt;/p>
&lt;p>如果把堆序性质施加到二项树上并允许任意高度上最多一棵二项树，则可以用二项树的集合唯一地表示任意大小的优先队列。如大小为13的优先队列可以用B3,B2,B0表示，可以写成1101，同时也是13的二进制形式。&lt;/p>
&lt;h3 id="操作">操作&lt;/h3>
&lt;p>基本操作仍然是合并，思想是从小到大合并相同高度的二项树&lt;br>
插入是特殊情况下的合并&lt;br>
deleteMin将原二项队列一分为二，再合并&lt;/p>
&lt;p>编程需要注意&lt;strong>进位&lt;/strong>的实现&lt;/p></description></item><item><title>C盘根目录下的两个sys文件说明</title><link>https://i-square.github.io/p/Description-of-the-two-sys-files-in-the-root-directory-of-the-C-drive/</link><pubDate>Wed, 19 Apr 2017 16:24:22 +0000</pubDate><guid>https://i-square.github.io/p/Description-of-the-two-sys-files-in-the-root-directory-of-the-C-drive/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>实验室里有一台高配工作站，内存有512GB，用一块256GB的SSD安装Win7 x64操作系统以后，硬盘空间只剩下几十MB了，查看C盘下的文件之后，发现有两个隐藏的系统文件占用了200GB+的空间，于是马上查了它们的来头。&lt;/p>
&lt;!-- more -->
&lt;h2 id="pagefilesys">pagefile.sys&lt;/h2>
&lt;p>&lt;code>pagefile.sys&lt;/code> 是系统安装过程中创建的虚拟内存页面文件。这个文件的大小是自己系统虚拟内存设置的最小值的大小。假如虚拟内存的设置为800MB－1600MB 那么你在自己的设定驱动盘下面就可看到大小为800MB的 &lt;code>pagefile.sys&lt;/code> 文件。&lt;/p>
&lt;h3 id="优化方法">优化方法&lt;/h3>
&lt;p>通常自己可以在 &lt;code>我的电脑&lt;/code> 右键 &lt;code>属性&lt;/code> &amp;ndash;&amp;gt; &lt;code>高级&lt;/code> &amp;ndash;&amp;gt; &lt;code>性能&lt;/code> &amp;ndash;&amp;gt; &lt;code>高级&lt;/code> &amp;ndash;&amp;gt; &lt;code>虚拟内存&lt;/code> 中将所有盘的虚拟内存设置为无分页文件，并选择&lt;code>设置&lt;/code>后重启系统，就可以删除页面文件&lt;code>pagefile.sys&lt;/code>。&lt;/p>
&lt;h2 id="hiberfilsys">hiberfil.sys&lt;/h2>
&lt;p>这个文件是系统的休眠功能所占用的硬盘空间的文件（Windows默认休眠功能是处于打开状态的），电脑处于休眠状态时，内存中的所有内容将保存到硬盘，并且电脑会被关闭。电脑在返回打开状态之后，关闭电脑时打开的所有程序和文档将全都还原到桌面。也就是说，当你让电脑进入休眠状态时，Windows在关闭系统前将所有的内存内容写入 &lt;code>hiberfil.sys&lt;/code> 文件，当你重新打开电脑，操作系统使用 &lt;code>hiberfil.sys&lt;/code> 把所有信息放回内存，电脑恢复到关闭前的状态。然而，只要休眠功能开启，Windows就会在硬盘上留下 &lt;code>hiberfil.sys&lt;/code> 文件，即使你从来不休眠。&lt;/p>
&lt;h3 id="优化方法-1">优化方法&lt;/h3>
&lt;p>以管理员身份运行CMD，然后输入命令 &lt;code>powercfg -h off&lt;/code> ，回车后立即生效， &lt;code>hiberfil.sys&lt;/code> 文件已经不见了。&lt;/p></description></item><item><title>数据结构学习笔记（五）：散列</title><link>https://i-square.github.io/p/Data-structure-study-notes-5-hash/</link><pubDate>Fri, 07 Apr 2017 22:48:51 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-5-hash/</guid><description>&lt;p>散列表（hash table）的实现通常称为散列（hashing），指用于以O(1)时间执行插入、删除和查找的技术，但不支持需要排序信息的树操作，比如findMin、findMax以及在线性时间内按顺序打印整个表都不支持&lt;/p>
&lt;h2 id="内容">内容&lt;/h2>
&lt;p>中心数据结构是&lt;strong>散列表&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>实现散列表的几种方法&lt;/li>
&lt;li>分析比较几种方法&lt;/li>
&lt;li>介绍散列的多种应用&lt;/li>
&lt;li>比较散列表与二叉查找树&lt;/li>
&lt;/ul>
&lt;h2 id="散列函数">散列函数&lt;/h2>
&lt;p>基本思想：将每个键(Key)映射到从[0, TableSize)这个范围中的某个数，并且将其放到适当的单元中，这个映射就称为&lt;strong>散列函数&lt;/strong>。&lt;br>
问题：选择一个函数，决定当两个键散列到同一个值的时候（称为**冲突(collision)**应该做什么以及如何确定散列表的大小。&lt;br>
&lt;em>注：一般使表的大小为素数，有助于避免部分冲突问题&lt;/em>&lt;/p>
&lt;h3 id="装填因子load-factor">装填因子(load factor)&lt;/h3>
&lt;p>定义散列表的装填因子 λ 为散列表中的元素个数与散列表大小的比值。&lt;/p>
&lt;h2 id="分离链接法">分离链接法&lt;/h2>
&lt;p>将散列到同一个值的所有元素保留到一个链表中。&lt;br>
一般法则：使 λ ≈ 1，控制链表的长度，若 λ &amp;gt; 1 则通过再散列扩充&lt;/p>
&lt;h2 id="开放定址法">开放定址法&lt;/h2>
&lt;p>不用链表存储，实现分配较大空间，称为&lt;strong>探测散列表&lt;/strong>&lt;br>
hi(x) = (hash(x) + f(i)) mod TableSize, f(0) = 0.&lt;br>
一般 λ &amp;gt; 0.5 就要再散列&lt;/p>
&lt;ul>
&lt;li>线性探测 f(i) = i&lt;/li>
&lt;li>平方探测 f(i) = i^2&lt;/li>
&lt;li>双散列 f(i) = i * hash2(x), hash2(x) = R - (x mod R) 这样的函数会起作用，其中R为小于TableSize的素数&lt;/li>
&lt;/ul>
&lt;h2 id="再散列rehash">再散列(rehash)&lt;/h2>
&lt;ol>
&lt;li>只要表到一半就再散列&lt;/li>
&lt;li>只有插入失败时才再散列&lt;/li>
&lt;li>途中策略：当表到达某一个装填因子时进行再散列（最优）&lt;/li>
&lt;/ol></description></item><item><title>数据结构学习笔记（四）：树</title><link>https://i-square.github.io/p/Data-structure-study-notes-4-tree/</link><pubDate>Fri, 31 Mar 2017 22:05:29 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-4-tree/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>了解树是如何用于实现文件系统的&lt;/li>
&lt;li>了解树如何用来计算算术表达式的值&lt;/li>
&lt;li>了解如何用树实现O(logN)时间进行搜素&lt;/li>
&lt;li>讨论并使用set和map&lt;/li>
&lt;/ul>
&lt;h2 id="二叉树的遍历">二叉树的遍历&lt;/h2>
&lt;ul>
&lt;li>前序：先处理自己后处理左右儿子&lt;/li>
&lt;li>中序：先处理左儿子再处理自己再处理右儿子&lt;/li>
&lt;li>后序：先处理左右儿子再处理自己&lt;/li>
&lt;/ul>
&lt;h2 id="二叉查找树平均深度ologn">二叉查找树（平均深度O(logN)）&lt;/h2>
&lt;p>性质：对于树中的每个节点X，左子树中所有项的值小于X中的项，右子树中所有项的值大于X中的项&lt;br>
缺点：不能动态调整，若输入为已排序序列则构造出最坏情况下的斜树&lt;/p>
&lt;h2 id="avl树">AVL树&lt;/h2>
&lt;ul>
&lt;li>带有&lt;strong>平衡条件&lt;/strong>的二叉查找树&lt;/li>
&lt;li>一棵AVL树是每个节点的左子树和右子树的高度最多相差1的二叉查找树（空树高度定义为-1）&lt;/li>
&lt;li>插入新节点可能破坏AVL树的平衡，需要通过&lt;strong>旋转&lt;/strong>解决&lt;/li>
&lt;/ul>
&lt;p>把需要平衡的节点叫α&lt;/p>
&lt;ol>
&lt;li>对α的左儿子的左子树进行一次插入&lt;/li>
&lt;li>对α的左儿子的右子树进行一次插入&lt;/li>
&lt;li>对α的右儿子的左子树进行一次插入&lt;/li>
&lt;li>对α的右儿子的右子树进行一次插入&lt;/li>
&lt;/ol>
&lt;p>1和4（左左，右右）发生在外边，进行一次&lt;strong>单旋转&lt;/strong>即可，2和3（左右，右左）则发生在内部，需要通过&lt;strong>双旋转&lt;/strong>调整&lt;/p>
&lt;h2 id="伸展树">伸展树&lt;/h2>
&lt;p>节点可以达到任意深度，每次访问某节点后把该节点调整为根节点，任意连续M次操作花费O(MlogN)时间&lt;/p>
&lt;h2 id="b树平衡m路树">B树（平衡M路树）&lt;/h2>
&lt;p>M=3时：2-3树，实现平衡查找树的另一种方法&lt;/p>
&lt;h2 id="注意">注意&lt;/h2>
&lt;p>通过插入元素构造查找树，然后执行中序遍历，可以得到排序后的元素。&lt;br>
这是一种O(NlogN)的排序算法&lt;/p></description></item><item><title>MathType6.9b不兼容Office2016的解决办法</title><link>https://i-square.github.io/p/Solution-to-the-problem-that-MathType6.9b-is-not-compatible-with-Office2016/</link><pubDate>Wed, 29 Mar 2017 18:37:43 +0000</pubDate><guid>https://i-square.github.io/p/Solution-to-the-problem-that-MathType6.9b-is-not-compatible-with-Office2016/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>安装MathType6.9b后打开Word2016，发现菜单栏里并没有集成MathType，想办法解决以后，菜单栏上已经集成了MathType，但是仍然不能用，每次打开Word都会弹框提示Mathpage.wll未找到，无奈又去网上找寻了解决办法，在这里记录一下，就当云笔记了。&lt;/p>
&lt;!-- more -->
&lt;h2 id="解决办法">解决办法&lt;/h2>
&lt;h3 id="office2016支持">Office2016支持&lt;/h3>
&lt;p>Office2016需要在MathType根目录下添加文件MPlugin.dll，一般在安装文件夹里&lt;/p>
&lt;h3 id="mathpagewll未找到问题">Mathpage.wll未找到问题&lt;/h3>
&lt;p>通过以下方法解决(以Office2016为例)：&lt;/p>
&lt;ol>
&lt;li>依次打开 &lt;code>Word→文件→选项→信任中心→信任中心设置→受信任位置→添加新位置&lt;/code>&lt;br>
添加 &lt;code>C:\Program Files\Microsoft Office\Office16\STARTUP&lt;/code>，然后关闭Word&lt;/li>
&lt;li>在mathtype安装目录下找到以下2个文件(以64位系统为例):
&lt;ul>
&lt;li>&lt;code>C:\Program Files (x86)\MathType\MathPage\64\MathPage.wll&lt;/code>&lt;/li>
&lt;li>&lt;code>C:\Program Files (x86)\MathType\Office Support\64\MathType Commands 6 For Word 2016.dotm&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将两个文件分别拷贝到对应的文件夹中:
&lt;ul>
&lt;li>将 &lt;code>MathType Commands 6 For Word 2016.dotm&lt;/code> 拷贝到 &lt;code>C:\Program Files\Microsoft Office\Office16\STARTUP&lt;/code>&lt;/li>
&lt;li>将 &lt;code>MathPage.wll&lt;/code> 拷贝到 &lt;code>C:\Program Files\Microsoft Office\Office16&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>重新打开Word你会发现一切都OK了!&lt;/li>
&lt;/ol></description></item><item><title>数据结构学习笔记（三）：表、栈和队列</title><link>https://i-square.github.io/p/Data-structure-study-notes-3-tables-stacks-and-queues/</link><pubDate>Mon, 27 Mar 2017 15:27:43 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-3-tables-stacks-and-queues/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>介绍三种基本的数据结构&lt;/li>
&lt;li>介绍抽象数据类型(ADT, abstract data type)的概念&lt;/li>
&lt;li>介绍栈ADT及其在实现递归方面的应用&lt;/li>
&lt;li>介绍队列ADT及其在操作系统和算法设计中的应用&lt;/li>
&lt;li>给出vector和list的重要子集的实现&lt;/li>
&lt;/ul>
&lt;h2 id="栈">栈&lt;/h2>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>栈是一个表，因此任何实现表的方法都能实现栈。&lt;/p>
&lt;h3 id="应用">应用&lt;/h3>
&lt;ol>
&lt;li>符号平衡&lt;/li>
&lt;li>后缀（逆波兰）表达式计算&lt;/li>
&lt;li>中缀到后缀的转换&lt;/li>
&lt;li>函数调用&lt;br>
（代码实现了一个简单的计算器，应保证输入合法）&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结&lt;/h2>
&lt;h3 id="快慢指针">快慢指针&lt;/h3>
&lt;p>ex 3.34 提示：判断一个链表是否有环，只使用O(1)的额外空间，使用两个迭代器p,q p每次递增1，q每次递增2，若q到了末尾则没环，否则pq必定在环中间相遇&lt;/p>
&lt;p>也可用于快速找出单链表的中间节点&lt;/p></description></item><item><title>Office2016中右键无法打开Visio图像的解决办法</title><link>https://i-square.github.io/p/Solution-to-the-problem-that-cannot-open-the-Visio-object-by-right-click-in-Office2016/</link><pubDate>Sun, 26 Mar 2017 15:21:56 +0000</pubDate><guid>https://i-square.github.io/p/Solution-to-the-problem-that-cannot-open-the-Visio-object-by-right-click-in-Office2016/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>在Office2016中，右键Visio图像，只有“转换”功能，而不再提供之前早期Office中提供的“打开”和“编辑”功能，那么，如何能够在Office2016中打开visio图像呢？&lt;/p>
&lt;!-- more -->
&lt;h2 id="解决办法">解决办法&lt;/h2>
&lt;p>在Visio图上使用 &lt;code>ALT + 双击鼠标左键&lt;/code> 即可在Visio中打开&lt;br>
直接双击Visio图像则是和之前版本一样，在当前Office窗口中打开Visio图。&lt;/p></description></item><item><title>数据结构学习笔记（二）：算法分析</title><link>https://i-square.github.io/p/Data-structure-study-notes-2-algorithm-analysis/</link><pubDate>Sat, 25 Mar 2017 22:48:53 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-2-algorithm-analysis/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>主要内容是复杂度分析&lt;/li>
&lt;li>大O标记&lt;/li>
&lt;li>计算大O时的一般法则
&lt;ul>
&lt;li>对数规律的一般法则&lt;br>
如果一个算法用常数时间（O(1)）将问题的大小削减为其一部分（通常是1/2），那么该算法就是O(logN)的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="例子">例子&lt;/h2>
&lt;ol>
&lt;li>二分搜索提供了O(logN)的查找算法&lt;/li>
&lt;li>最大公因数的欧几里得算法也是O(logN)的&lt;/li>
&lt;li>幂运算的递归算法&lt;/li>
&lt;/ol></description></item><item><title>数据结构学习笔记（一）：引论</title><link>https://i-square.github.io/p/Data-structure-study-notes-1-introduction/</link><pubDate>Fri, 24 Mar 2017 14:22:23 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-1-introduction/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>介绍基本数学知识&lt;/li>
&lt;li>简要复习递归&lt;/li>
&lt;li>介绍用到的C++知识&lt;/li>
&lt;/ul>
&lt;h2 id="递归的四条基本法则">递归的四条基本法则&lt;/h2>
&lt;ol>
&lt;li>基准情形。必须总有某些基准情形不用递归就能求解。&lt;/li>
&lt;li>不断推进。对于那些需要递归求解的情形，递归调用必须总能够朝着基准情形的方向推进。&lt;/li>
&lt;li>设计法则。假设所有的递归调用都能运行。&lt;/li>
&lt;li>合成效益法则。在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。&lt;/li>
&lt;/ol></description></item><item><title>数据结构学习笔记（零）：开始</title><link>https://i-square.github.io/p/Data-structure-study-notes-0-start/</link><pubDate>Thu, 23 Mar 2017 11:23:54 +0000</pubDate><guid>https://i-square.github.io/p/Data-structure-study-notes-0-start/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>为了准备今年后半年到来的秋招，我决定开始学习数据结构，为后面的学习打基础，采用的教材是weiss的《数据结构与算法分析C++描述》，计划实现书上上的示例代码以及力所能及的课后习题。&lt;/p>
&lt;p>在Github上同步源码，项目地址：&lt;a class="link" href="https://github.com/i-square/Data-Structure" target="_blank" rel="noopener"
>https://github.com/i-square/Data-Structure&lt;/a>&lt;/p>
&lt;h2 id="学习环境">学习环境&lt;/h2>
&lt;ul>
&lt;li>Windows 10 &amp;amp; 8.1&lt;/li>
&lt;li>Visual Studio 2015 with update 3&lt;/li>
&lt;li>C++ (部分C++11语法)&lt;/li>
&lt;/ul></description></item><item><title>增强VPS安全性的常用方法</title><link>https://i-square.github.io/p/Common-Ways-to-Enhance-VPS-Security/</link><pubDate>Mon, 06 Mar 2017 09:24:30 +0000</pubDate><guid>https://i-square.github.io/p/Common-Ways-to-Enhance-VPS-Security/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>因为之前提到的Gihub学生包，我入手了 &lt;code>DigitalOcean&lt;/code> 的VPS，由于刚刚接触VPS，对于VPS的安全性并没有什么概念，所以我直接使用一个汉化版PuTTY客户端，以root账户在22端口登录的，刚开始登录几次都没出现什么状况，然而隔天登录的时候就出现了类似以下的提示，这才让我产生了要提高VPS安全性的想法。&lt;/p>
&lt;!-- more -->
&lt;blockquote>
&lt;p>Last failed login: Tue Feb 10 23:32:08 EST 2017 from static-15-64-34.rpnspl.com on ssh:notty
There were 166 failed login attempts since the last successful login.
Last login: Tue Feb 10 18:54:37 2017 from &lt;code>ip&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>这里的 &lt;code>ip&lt;/code> 并不是我的IP地址，也就是说有人(或机器人)在恶意试探我的VPS密码。看到这提示，我马上上谷歌搜索，发现这个现象非常普遍，多数都是被机器人扫描然后试图暴力破解，如果不加以防范，代价会很大。&lt;/p>
&lt;p>我在查问题的时候发现，PuTTY官方并没有提供中文版本，所以网上的汉化版有可能被植入后门，非常不安全，所以在此提醒，这一类涉及重要密码的软件&lt;strong>绝对不要&lt;/strong>用民间汉化版！&lt;/p>
&lt;p>那么如何知道自己的VPS账号正在遭受扫描和暴力破解呢？简单的方法就是查看日志：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看登录成功的用户信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 最新的登录记录在最前面，所以可以用以下命令来查看。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last &lt;span class="p">|&lt;/span> less
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看登录失败的用户信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lastb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看登录日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tail /var/log/secure
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以执行以下命令，查询出来的结果中包含了&lt;code>ip地址=数量&lt;/code>就是攻击者信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cat /var/log/secure&lt;span class="p">|&lt;/span>awk &lt;span class="s1">&amp;#39;/Failed/{print $(NF-3)}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>sort&lt;span class="p">|&lt;/span>uniq -c&lt;span class="p">|&lt;/span>awk &lt;span class="s1">&amp;#39;{print $2&amp;#34;=&amp;#34;$1;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如何来增强VPS账号的安全性呢？除了养成使用正规软件的好习惯外，还要从VPS本身来加强VPS账号的安全性。&lt;/p>
&lt;ul>
&lt;li>Linux有一个自动统计VPS登录错误的工具： &lt;code>Denyhosts&lt;/code> ，一旦登录VPS账号错误次数超过了 &lt;code>Denyhosts&lt;/code> 的安全设置， &lt;code>Denyhosts&lt;/code> 就会将该IP记录下来，同时将其放入黑名单当中，禁止该IP在某一段时间内继续访问VPS，通过它可以实现自动封锁恶意IP&lt;/li>
&lt;li>默认的SSH端口是22，通过修改自己的SSH端口先为扫描者增加一道端口门槛&lt;/li>
&lt;li>VPS默认的账号是root，如果我们禁用了root，那么要攻破账号又得先暴力猜测VPS的账号，难度又增加几分&lt;/li>
&lt;li>如果还不放心，我们可以直接禁用密码登录验证VPS的方式，改用密钥登录，这样安全系数是相当高了&lt;/li>
&lt;/ul>
&lt;p>&lt;em>注：本人主机为CentOS 7 x64系统，以下内容均基于此环境&lt;/em>&lt;/p>
&lt;h2 id="denyhosts攻击">Denyhosts攻击&lt;/h2>
&lt;ol>
&lt;li>Linux各平台现在基本上都可以直接安装Denyhosts了，直接运行命令安装&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">yum install denyhosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>安装好了Denyhosts，默认的配置基本上就可以防御一定的暴力攻击了， &lt;code>/etc/hosts.deny&lt;/code> 文件里保存了被屏蔽的记录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你要自定义Denyhosts的相关配置，执行： &lt;code>vi /etc/denyhosts.conf&lt;/code> ，相关参数的说明可以自行搜索，一般用户默认即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="修改ssh端口">修改SSH端口&lt;/h2>
&lt;p>输入命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi /etc/ssh/sshd_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑SSH服务的配置文件，找到 &lt;code>#port 22&lt;/code> ，将前面的 &lt;code>#&lt;/code> 去掉，然后将 &lt;code>22&lt;/code> 修改为你自己设定的端口号，如 &lt;code>12345&lt;/code> ，保存后重启SSH服务以使配置生效&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl restart sshd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="禁用root账户">禁用Root账户&lt;/h2>
&lt;p>禁用root账户之前，必须先新建一个新的账户。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">useradd user &lt;span class="c1">#添加用户名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">passwd user &lt;span class="c1">#为user用户设置密码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后编辑配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi /etc/ssh/sshd_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到里面的 &lt;code>PermitRootLogin yes&lt;/code> ，将后面的 &lt;code>yes&lt;/code> 改成 &lt;code>no&lt;/code> ，如果没有这一行则直接加入即可。保存后重启SSH服务以使配置生效&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl restart sshd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用密钥登录">使用密钥登录&lt;/h2>
&lt;h3 id="生成密钥">生成密钥&lt;/h3>
&lt;p>SSH登录方式有账号+密码和密钥认证两种形式，为了阻止暴力破解VPS的账号和密码，我们可以放弃密码验证的方式，改用密钥文件验证。&lt;/p>
&lt;p>以&lt;strong>普通用户&lt;/strong>(如user)执行以下命令，在VPS上生成密钥文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh-keygen -t rsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生成密钥时会询问你密钥保存的位置，默认是 &lt;code>/username/.ssh&lt;/code> ，保持默认即可，你还可以为你的密钥设置一个密码，默认为空。&lt;/p>
&lt;p>密钥生成后，进入密钥存放的目录中，执行以下命令，将公钥生成一个新的文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将id-rsa这个私钥文件用winSCP下载到本地，打开PuTTYGen软件，执行Conversions-&amp;gt;Import Key，导入这个私钥文件，然后选择Save private key，这时会在本地生成一个PPK文件，在PuTTY的 &lt;code>Connection/SSH/Auth&lt;/code> 中选择刚刚保存的PPK文件，以后即可用密钥认证登录VPS了。&lt;/p>
&lt;h3 id="centos-7权限问题">CentOS 7权限问题&lt;/h3>
&lt;p>CentOS 7系统下，用户user的home目录： &lt;code>/home/user&lt;/code> 的权限变成了 &lt;code>777&lt;/code> ，造成不能正常登陆SSH，报如下错误： &lt;code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)&lt;/code>&lt;/p>
&lt;p>SSH对公钥、私钥的权限和所有权的要求是非常严格的，总结如下：
1、下面两个目录的所有权必须是 &lt;code>user&lt;/code> ，所属组也应该是 &lt;code>user&lt;/code> ，权限必须为 &lt;code>700&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>/home/user
/home/user/.ssh&lt;/p>
&lt;/blockquote>
&lt;p>2、下面公钥文件的所有权必须是 &lt;code>user&lt;/code> ，所属组也应该是 &lt;code>user&lt;/code> ，权限必须为 &lt;code>644&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>/home/user/.ssh/authorized_keys&lt;/p>
&lt;/blockquote>
&lt;p>3、下面私钥文件的所有权必须是 &lt;code>user&lt;/code> ，所属组也应该是 &lt;code>user&lt;/code> ，权限必须是 &lt;code>600&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>/home/user/.ssh/id_rsa&lt;/p>
&lt;/blockquote>
&lt;p>接着上面的操作，这次需要获取root权限，首先输入命令 &lt;code>su&lt;/code> 再输入root密码获取root权限，然后依次执行以下命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir /etc/ssh/user
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp /home/user/.ssh/authorized_keys /etc/ssh/user/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">755&lt;/span> /etc/ssh/user
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">600&lt;/span> /etc/ssh/user/authorized_keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chown -R user:user /etc/ssh/user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑SSH配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi /etc/ssh/sshd_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到 &lt;code>AuthorizedKeysFile&lt;/code> 这项(如果没有则添加)，修改为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">AuthorizedKeysFile /etc/ssh/%u/authorized_keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存后重启SSH服务以使配置生效&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl restart sshd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="禁止密码登录">禁止密码登录&lt;/h3>
&lt;p>&lt;strong>注意：请确认你已经可以通过密钥认证的方式登录VPS&lt;/strong>&lt;/p>
&lt;p>有了密钥登录VPS，我们就可以禁止用密码登录这种验证方式了，还是
编辑SSH配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi /etc/ssh/sshd_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到 &lt;code>PasswordAuthentication&lt;/code> (没有则添加)并修改后面的 &lt;code>yes&lt;/code> 为 &lt;code>no&lt;/code> ，保存后重启SSH服务以使配置生效&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl restart sshd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="小结">小结&lt;/h2>
&lt;p>通过以上这些措施可以有效防范暴力破解VPS，平时使用官方软件也是提升安全性的一大举措，总而言之，没有绝对的安全，但是只要我们平时稍加留心就不会给破解者可乘之机。&lt;/p></description></item><item><title>新的起点</title><link>https://i-square.github.io/p/New-Start-Hexo/</link><pubDate>Sat, 25 Feb 2017 17:27:39 +0000</pubDate><guid>https://i-square.github.io/p/New-Start-Hexo/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>从2013年我搭建的第一个 &lt;code>Wordpress&lt;/code> 博客开始，我陆陆续续尝试过各种博客类网站，有自己搭建的 &lt;code>Wordpress&lt;/code> 博客，也有诸如 &lt;code>点点网&lt;/code> 和 &lt;code>lofter&lt;/code> 这样的轻博客社区，但最终都是留下一篇 &lt;code>hello world&lt;/code> 走人。&lt;/p>
&lt;!-- more -->
&lt;h2 id="缘起">缘起&lt;/h2>
&lt;p>近两年随着 &lt;code>github&lt;/code> 的火热，搭建在 &lt;code>github pages&lt;/code> 上的博客也如雨后春笋一般噌噌地冒出来，我也想尝尝鲜，于是在大谷歌搜索到一篇文章：&lt;a class="link" href="https://wsgzao.github.io/post/hexo/" target="_blank" rel="noopener"
>使用GitHub和Hexo搭建免费静态Blog&lt;/a>，作者：&lt;a class="link" href="https://wsgzao.github.io/" target="_blank" rel="noopener"
>wsgzao&lt;/a>，然后照猫画虎搭建了自己的博客，非常感谢原文博主分享自己的经验，让我这个门外汉也能轻松上手。&lt;/p>
&lt;h2 id="展望">展望&lt;/h2>
&lt;p>这次使用 &lt;code>Hexo + github&lt;/code> 的博客我希望能够长时间更新下去，博客定位大方向是我自己的学习笔记、思考感悟，也会写一些生活随笔，说不定也会分享一些图片、音乐、视频等等，:)&lt;/p>
&lt;h2 id="多说点儿">多说点儿&lt;/h2>
&lt;p>刚开始学习用 &lt;code>Markdown&lt;/code> 写文章，还不是太习惯，用到的语法也只有一两种，慢慢完善吧，:P&lt;/p></description></item><item><title>Post Test 发布测试</title><link>https://i-square.github.io/p/Post-Test/</link><pubDate>Fri, 24 Feb 2017 14:33:36 +0000</pubDate><guid>https://i-square.github.io/p/Post-Test/</guid><description>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>首先发布一篇测试文章，以后慢慢扩充。&lt;/p>
&lt;p>&lt;del>龟速学习 &lt;code>Markdown&lt;/code> 语法ing。&lt;/del>&lt;/p></description></item><item><title>Hello World</title><link>https://i-square.github.io/p/Hexo-Hello-World/</link><pubDate>Thu, 23 Feb 2017 15:15:45 +0000</pubDate><guid>https://i-square.github.io/p/Hexo-Hello-World/</guid><description>&lt;p>Welcome to &lt;a class="link" href="https://hexo.io/" target="_blank" rel="noopener"
>Hexo&lt;/a>! This is your very first post. Check &lt;a class="link" href="https://hexo.io/docs/" target="_blank" rel="noopener"
>documentation&lt;/a> for more info. If you get any problems when using Hexo, you can find the answer in &lt;a class="link" href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener"
>troubleshooting&lt;/a> or you can ask me on &lt;a class="link" href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener"
>GitHub&lt;/a>.&lt;/p>
&lt;!-- more -->
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h3 id="create-a-new-post">Create a new post&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ hexo new &lt;span class="s2">&amp;#34;My New Post&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a class="link" href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener"
>Writing&lt;/a>&lt;/p>
&lt;h3 id="run-server">Run server&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ hexo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a class="link" href="https://hexo.io/docs/server.html" target="_blank" rel="noopener"
>Server&lt;/a>&lt;/p>
&lt;h3 id="generate-static-files">Generate static files&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ hexo generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a class="link" href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener"
>Generating&lt;/a>&lt;/p>
&lt;h3 id="deploy-to-remote-sites">Deploy to remote sites&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ hexo deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a class="link" href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener"
>Deployment&lt;/a>&lt;/p></description></item><item><title>关于 | About</title><link>https://i-square.github.io/about/</link><pubDate>Thu, 23 Feb 2017 18:00:00 +0800</pubDate><guid>https://i-square.github.io/about/</guid><description>&lt;blockquote>
&lt;p>佛曰： 一花一世界，一叶一菩提。&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>《华严经》&lt;/span>&lt;cite>&lt;/cite>&lt;/span>&lt;/blockquote>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;p>我是 &lt;code>i-square&lt;/code>，一个兴趣使然的程序员。&lt;/p>
&lt;p>欢迎来到我的博客，这里是我分享日常、心得、体验的地方。&lt;/p>
&lt;h2 id="blog-history">Blog History&lt;/h2>
&lt;p>这个博客是基于 &lt;code>Hugo&lt;/code> 和 &lt;code>GitHub Pages&lt;/code> 的静态博客，使用了 &lt;code>Markdown&lt;/code> 作为写作方式。&lt;/p>
&lt;p>这并不是我的第一个博客。从2013年开始，我先后折腾过各种博客平台，但都没有坚持多久，在此留个记录：&lt;/p>
&lt;ul>
&lt;li>2013年2月15日：初次接触 &lt;code>Wordpress&lt;/code> 搭建自己的第一个独立博客（折腾了虚拟主机、域名、CDN等）&lt;/li>
&lt;li>2013年7月23日：转移到轻博客 &lt;code>Lofter&lt;/code> 以多媒体的形式分享自己的生活感悟（模板好看）&lt;/li>
&lt;li>2014~2016年：准备考研、读研、做项目，没有折腾博客&lt;/li>
&lt;li>2017年2月23日：创建基于 &lt;code>Hexo&lt;/code> 和 &lt;code>Github Pages&lt;/code> 的静态博客（玩了玩 &lt;code>Hexo&lt;/code> ）&lt;/li>
&lt;li>2018~2023年：毕业、工作、没有折腾博客&lt;/li>
&lt;li>2023年2月8日：从 &lt;code>Hexo&lt;/code> 迁移到 &lt;code>Hugo&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="contact-me">Contact Me&lt;/h2>
&lt;ul>
&lt;li>GitHub：&lt;a class="link" href="https://github.com/i-square" target="_blank" rel="noopener"
>i-square&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>标签 | Tags</title><link>https://i-square.github.io/tags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://i-square.github.io/tags/</guid><description/></item><item><title>分类 | Categories</title><link>https://i-square.github.io/categories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://i-square.github.io/categories/</guid><description/></item><item><title>归档 | Archives</title><link>https://i-square.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://i-square.github.io/archives/</guid><description/></item><item><title>链接 | Links</title><link>https://i-square.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://i-square.github.io/links/</guid><description/></item><item><title>搜索 | Search</title><link>https://i-square.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://i-square.github.io/search/</guid><description/></item></channel></rss>